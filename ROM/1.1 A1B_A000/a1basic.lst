ca65 V2.18 - Ubuntu 2.18-1
Main file   : a1basic.s
Current file: a1basic.s

000000r 1               ; Apple 1 BASIC
000000r 1               ;
000000r 1               ; Modifications to build with CC65 by Jeff Tranter <tranter@pobox.com>
000000r 1               ;
000000r 1               ; Apple 1 BASIC was written by Steve Wozniak
000000r 1               ; Uses disassembly copyright 2003 Eric Smith <eric@brouhaha.com>
000000r 1               ; http://www.brouhaha.com/~eric/retrocomputing/apple/apple1/basic/
000000r 1               
000000r 1               Z1d     =       $1D
000000r 1               ch      =       $24     ; horizontal cursor location
000000r 1               var     =       $48
000000r 1               lomem   =       $4A     ; lower limit of memory used by BASIC (2 bytes)
000000r 1               himem   =       $4C     ; upper limit of memory used by BASIC (2 bytes)
000000r 1               rnd     =       $4E     ; random number (2 bytes)
000000r 1               
000000r 1               ; The noun stack and syntax stack appear to overlap, which is OK since
000000r 1               ; they apparently are not used simultaneously.
000000r 1               
000000r 1               ; The noun stack size appears to be 32 entries, based on LDX #$20
000000r 1               ; instruction at e67f.  However, there seems to be enough room for
000000r 1               ; another 8 entries.  The noun stack builds down from noun_stk_<part>+$1f
000000r 1               ; to noun_stk_<part>+$00, indexed by the X register.
000000r 1               
000000r 1               ; Noun stack usage appears to be:
000000r 1               ;   integer:
000000r 1               ;       (noun_stk_h_int,noun_stk_l) = value
000000r 1               ;       noun_stk_h_str = 0
000000r 1               ;   string:
000000r 1               ;       (noun_stk_h_str,noun_stk_l) = pointer to string
000000r 1               ;       noun_stk_h_int = any
000000r 1               ; Since noun_stk_h_str determines whether stack entry is integer or string,
000000r 1               ; strings can't start in zero page.
000000r 1               
000000r 1               noun_stk_l =    $50
000000r 1               syn_stk_h =     $58     ; through $77
000000r 1               noun_stk_h_str = $78
000000r 1               syn_stk_l  =    $80     ; through $9F
000000r 1               noun_stk_h_int = $A0
000000r 1               txtndxstk  =    $A8     ; through $C7
000000r 1               text_index =    $C8     ; index into text being tokenized (in buffer at $0200)
000000r 1               leadbl  =       $C9     ; leading blanks
000000r 1               pp      =       $CA     ; pointer to end of program (2 bytes)
000000r 1               pv      =       $CC     ; pointer to end of variable storage (2 bytes)
000000r 1               acc     =       $CE     ; (2 bytes)
000000r 1               srch    =       $D0
000000r 1               tokndxstk =     $D1
000000r 1               srch2   =       $D2
000000r 1               if_flag =       $D4
000000r 1               cr_flag =       $D5
000000r 1               current_verb =  $D6
000000r 1               precedence =    $D7
000000r 1               x_save  =       $D8
000000r 1               run_flag =      $D9
000000r 1               aux     =       $DA
000000r 1               pline   =       $DC     ; pointer to current program line (2 bytes)
000000r 1               pverb   =       $E0     ; pointer to current verb (2 bytes)
000000r 1               p1      =       $E2
000000r 1               p2      =       $E4
000000r 1               p3      =       $E6
000000r 1               token_index =   $F1    ; pointer used to write tokens into buffer  2 bytes)
000000r 1               pcon    =       $F2    ; temp used in decimal output (2 bytes)
000000r 1               auto_inc =      $F4
000000r 1               auto_ln =       $F6
000000r 1               auto_flag =     $F8
000000r 1               char    =       $F9
000000r 1               leadzr  =       $FA
000000r 1               for_nest_count = $FB    ; count of active (nested) FOR loops
000000r 1               gosub_nest_count = $FC  ; count of active (nested) subroutines calls (GOSUB)
000000r 1               synstkdx =      $FD
000000r 1               synpag  =       $FE
000000r 1               
000000r 1               ; GOSUB stack, max eight entries
000000r 1               ; note that the Apple II version has sixteen entries
000000r 1               gstk_pverbl     =       $0100    ; saved pverb
000000r 1               gstk_pverbh     =       $0108
000000r 1               gstk_plinel     =       $0110    ; saved pline
000000r 1               gstk_plineh     =       $0118
000000r 1               
000000r 1               ; FOR stack, max eight entries
000000r 1               ; note that the Apple II version has sixteen entries
000000r 1               fstk_varl       =       $0120   ; pointer to index variable
000000r 1               fstk_varh       =       $0128
000000r 1               fstk_stepl      =       $0130   ; step value
000000r 1               fstk_steph      =       $0138
000000r 1               fstk_plinel     =       $0140   ; saved pline
000000r 1               fstk_plineh     =       $0148
000000r 1               fstk_pverbl     =       $0150   ; saved pverb
000000r 1               fstk_pverbh     =       $0158
000000r 1               fstk_tol        =       $0160   ; "to" (limit) value
000000r 1               fstk_toh        =       $0168
000000r 1               buffer  =       $0200
000000r 1               KBD     =       $D010
000000r 1               KBDCR   =       $D011
000000r 1               DSP     =       $D012
000000r 1               
000000r 1                       .org    $A000
00A000  1                       .export START
00A000  1  4C B0 A2     START:  JMP     cold            ; BASIC cold start entry point
00A003  1               
00A003  1               ; Get character for keyboard, return in A.
00A003  1  AD 11 D0     rdkey:  LDA     KBDCR           ; Read control register
00A006  1  10 FB                BPL     rdkey           ; Loop if no key pressed
00A008  1  AD 10 D0             LDA     KBD             ; Read key data
00A00B  1  60                   RTS                     ; and return
00A00C  1               
00A00C  1  8A           Se00c:  TXA
00A00D  1  29 20                AND     #$20
00A00F  1  F0 23                BEQ     Le034
00A011  1               
00A011  1  A9 A0        Se011:  LDA     #$A0
00A013  1  85 E4                STA     p2
00A015  1  4C C9 A3             JMP     cout
00A018  1               
00A018  1  A9 20        Se018:  LDA     #$20
00A01A  1               
00A01A  1  C5 24        Se01a:  CMP     ch
00A01C  1  B0 0C                BCS     nextbyte
00A01E  1  A9 8D                LDA     #$8D
00A020  1  A0 07                LDY     #$07
00A022  1  20 C9 A3     Le022:  JSR     cout
00A025  1  A9 A0                LDA     #$A0
00A027  1  88                   DEY
00A028  1  D0 F8                BNE     Le022
00A02A  1               
00A02A  1  A0 00        nextbyte:       LDY     #$00
00A02C  1  B1 E2                LDA     (p1),Y
00A02E  1  E6 E2                INC     p1
00A030  1  D0 02                BNE     Le034
00A032  1  E6 E3                INC     p1+1
00A034  1  60           Le034:  RTS
00A035  1               
00A035  1               ; token $75 - "," in LIST command
00A035  1  20 15 A7     list_comman:    JSR     get16bit
00A038  1  20 76 A5             JSR     find_line2
00A03B  1  A5 E2        Le03b:  LDA     p1
00A03D  1  C5 E6                CMP     p3
00A03F  1  A5 E3                LDA     p1+1
00A041  1  E5 E7                SBC     p3+1
00A043  1  B0 EF                BCS     Le034
00A045  1  20 6D A0             JSR     list_line
00A048  1  4C 3B A0             JMP     Le03b
00A04B  1               
00A04B  1               ; token $76 - LIST command w/ no args
00A04B  1  A5 CA        list_all:       LDA     pp
00A04D  1  85 E2                STA     p1
00A04F  1  A5 CB                LDA     pp+1
00A051  1  85 E3                STA     p1+1
00A053  1  A5 4C                LDA     himem
00A055  1  85 E6                STA     p3
00A057  1  A5 4D                LDA     himem+1
00A059  1  85 E7                STA     p3+1
00A05B  1  D0 DE                BNE     Le03b
00A05D  1               
00A05D  1               ; token $74 - LIST command w/ line number(s)
00A05D  1  20 15 A7     list_cmd:       JSR     get16bit
00A060  1  20 6D A5             JSR     find_line
00A063  1  A5 E4                LDA     p2
00A065  1  85 E2                STA     p1
00A067  1  A5 E5                LDA     p2+1
00A069  1  85 E3                STA     p1+1
00A06B  1  B0 C7                BCS     Le034
00A06D  1               
00A06D  1               ; list one program line
00A06D  1  86 D8        list_line:      STX     x_save
00A06F  1  A9 A0                LDA     #$A0
00A071  1  85 FA                STA     leadzr
00A073  1  20 2A A0             JSR     nextbyte
00A076  1  98                   TYA
00A077  1               
00A077  1               ; list an integer (line number or literal)
00A077  1  85 E4        list_int:       STA     p2
00A079  1  20 2A A0             JSR     nextbyte
00A07C  1  AA                   TAX
00A07D  1  20 2A A0             JSR     nextbyte
00A080  1  20 1B A5             JSR     prdec
00A083  1  20 18 A0     Le083:  JSR     Se018
00A086  1  84 FA                STY     leadzr
00A088  1  AA                   TAX
00A089  1  10 18                BPL     list_token
00A08B  1  0A                   ASL
00A08C  1  10 E9                BPL     list_int
00A08E  1  A5 E4                LDA     p2
00A090  1  D0 03                BNE     Le095
00A092  1  20 11 A0             JSR     Se011
00A095  1  8A           Le095:  TXA
00A096  1  20 C9 A3     Le096:  JSR     cout
00A099  1  A9 25        Le099:  LDA     #$25
00A09B  1  20 1A A0             JSR     Se01a
00A09E  1  AA                   TAX
00A09F  1  30 F5                BMI     Le096
00A0A1  1  85 E4                STA     p2
00A0A3  1               
00A0A3  1               ; list a single token
00A0A3  1  C9 01        list_token:     CMP     #$01
00A0A5  1  D0 05                BNE     Le0ac
00A0A7  1  A6 D8                LDX     x_save
00A0A9  1  4C CD A3             JMP     crout
00A0AC  1  48           Le0ac:  PHA
00A0AD  1  84 CE                STY     acc
00A0AF  1  A2 AD                LDX     #$AD
00A0B1  1  86 CF                STX     acc+1
00A0B3  1  C9 51                CMP     #$51
00A0B5  1  90 04                BCC     Le0bb
00A0B7  1  C6 CF                DEC     acc+1
00A0B9  1  E9 50                SBC     #$50
00A0BB  1  48           Le0bb:  PHA
00A0BC  1  B1 CE                LDA     (acc),Y
00A0BE  1  AA           Le0be:  TAX
00A0BF  1  88                   DEY
00A0C0  1  B1 CE                LDA     (acc),Y
00A0C2  1  10 FA                BPL     Le0be
00A0C4  1  E0 C0                CPX     #$C0
00A0C6  1  B0 04                BCS     Le0cc
00A0C8  1  E0 00                CPX     #$00
00A0CA  1  30 F2                BMI     Le0be
00A0CC  1  AA           Le0cc:  TAX
00A0CD  1  68                   PLA
00A0CE  1  E9 01                SBC     #$01
00A0D0  1  D0 E9                BNE     Le0bb
00A0D2  1  24 E4                BIT     p2
00A0D4  1  30 03                BMI     Le0d9
00A0D6  1  20 F8 AF             JSR     Seff8
00A0D9  1  B1 CE        Le0d9:  LDA     (acc),Y
00A0DB  1  10 10                BPL     Le0ed
00A0DD  1  AA                   TAX
00A0DE  1  29 3F                AND     #$3F
00A0E0  1  85 E4                STA     p2
00A0E2  1  18                   CLC
00A0E3  1  69 A0                ADC     #$A0
00A0E5  1  20 C9 A3             JSR     cout
00A0E8  1  88                   DEY
00A0E9  1  E0 C0                CPX     #$C0
00A0EB  1  90 EC                BCC     Le0d9
00A0ED  1  20 0C A0     Le0ed:  JSR     Se00c
00A0F0  1  68                   PLA
00A0F1  1  C9 5D                CMP     #$5D
00A0F3  1  F0 A4                BEQ     Le099
00A0F5  1  C9 28                CMP     #$28
00A0F7  1  D0 8A                BNE     Le083
00A0F9  1  F0 9E                BEQ     Le099
00A0FB  1               
00A0FB  1               ; token $2A - left paren for substring like A$(3,5)
00A0FB  1  20 18 A1     paren_substr:   JSR     Se118
00A0FE  1  95 50                STA     noun_stk_l,X
00A100  1  D5 78                CMP     noun_stk_h_str,X
00A102  1  90 11        Le102:  BCC     Le115
00A104  1  A0 2B        string_err:     LDY     #$2B
00A106  1  4C E0 A3     go_errmess_1:   JMP     print_err_msg
00A109  1               
00A109  1               ; token $2B - comma for substring like A$(3,5)
00A109  1  20 34 AE     comma_substr:   JSR     getbyte
00A10C  1  D5 50                CMP     noun_stk_l,X
00A10E  1  90 F4                BCC     string_err
00A110  1  20 E4 AF             JSR     Sefe4
00A113  1  95 78                STA     noun_stk_h_str,X
00A115  1  4C 23 A8     Le115:  JMP     left_paren
00A118  1               
00A118  1  20 34 AE     Se118:  JSR     getbyte
00A11B  1  F0 E7                BEQ     string_err
00A11D  1  38                   SEC
00A11E  1  E9 01                SBC     #$01
00A120  1  60                   RTS
00A121  1               
00A121  1               ; token $42 - left paren for string array as dest
00A121  1               ; A$(1)="FOO"
00A121  1  20 18 A1     str_arr_dest:   JSR     Se118
00A124  1  95 50                STA     noun_stk_l,X
00A126  1  18                   CLC
00A127  1  F5 78                SBC     noun_stk_h_str,X
00A129  1  4C 02 A1             JMP     Le102
00A12C  1  A0 14        Le12c:  LDY     #$14
00A12E  1  D0 D6                BNE     go_errmess_1
00A130  1               
00A130  1               ; token $43 - comma, next var in DIM statement is string
00A130  1               ; token $4E - "DIM", next var in DIM is string
00A130  1  20 18 A1     dim_str:        JSR     Se118
00A133  1  E8                   INX
00A134  1  B5 50        Le134:  LDA     noun_stk_l,X
00A136  1  85 DA                STA     aux
00A138  1  65 CE                ADC     acc
00A13A  1  48                   PHA
00A13B  1  A8                   TAY
00A13C  1  B5 78                LDA     noun_stk_h_str,X
00A13E  1  85 DB                STA     aux+1
00A140  1  65 CF                ADC     acc+1
00A142  1  48                   PHA
00A143  1  C4 CA                CPY     pp
00A145  1  E5 CB                SBC     pp+1
00A147  1  B0 E3                BCS     Le12c
00A149  1  A5 DA                LDA     aux
00A14B  1  69 FE                ADC     #$FE
00A14D  1  85 DA                STA     aux
00A14F  1  A9 FF                LDA     #$FF
00A151  1  A8                   TAY
00A152  1  65 DB                ADC     aux+1
00A154  1  85 DB                STA     aux+1
00A156  1  C8           Le156:  INY
00A157  1  B1 DA                LDA     (aux),Y
00A159  1  D9 CC 00             CMP     pv,Y
00A15C  1  D0 0F                BNE     Le16d
00A15E  1  98                   TYA
00A15F  1  F0 F5                BEQ     Le156
00A161  1  68           Le161:  PLA
00A162  1  91 DA                STA     (aux),Y
00A164  1  99 CC 00             STA     pv,Y
00A167  1  88                   DEY
00A168  1  10 F7                BPL     Le161
00A16A  1  E8                   INX
00A16B  1  60                   RTS
00A16C  1  EA                   NOP
00A16D  1  A0 80        Le16d:  LDY     #$80
00A16F  1  D0 95        Le16f:  BNE     go_errmess_1
00A171  1               
00A171  1               ; token ???
00A171  1  A9 00        input_str:      LDA     #$00
00A173  1  20 0A A7             JSR     push_a_noun_stk
00A176  1  A0 02                LDY     #$02
00A178  1  94 78                STY     noun_stk_h_str,X
00A17A  1  20 0A A7             JSR     push_a_noun_stk
00A17D  1  A9 BF                LDA     #$BF                    ; '?'
00A17F  1  20 C9 A3             JSR     cout
00A182  1  A0 00                LDY     #$00
00A184  1  20 9E A2             JSR     read_line
00A187  1  94 78                STY     noun_stk_h_str,X
00A189  1  EA                   NOP
00A18A  1  EA                   NOP
00A18B  1  EA                   NOP
00A18C  1               
00A18C  1               ; token $70 - string literal
00A18C  1  B5 51        string_lit:     LDA     noun_stk_l+1,X
00A18E  1  85 CE                STA     acc
00A190  1  B5 79                LDA     noun_stk_h_str+1,X
00A192  1  85 CF                STA     acc+1
00A194  1  E8                   INX
00A195  1  E8                   INX
00A196  1  20 BC A1             JSR     Se1bc
00A199  1  B5 4E        Le199:  LDA     rnd,X
00A19B  1  D5 76                CMP     syn_stk_h+30,X
00A19D  1  B0 15                BCS     Le1b4
00A19F  1  F6 4E                INC     rnd,X
00A1A1  1  A8                   TAY
00A1A2  1  B1 CE                LDA     (acc),Y
00A1A4  1  B4 50                LDY     noun_stk_l,X
00A1A6  1  C4 E4                CPY     p2
00A1A8  1  90 04                BCC     Le1ae
00A1AA  1  A0 83                LDY     #$83
00A1AC  1  D0 C1                BNE     Le16f
00A1AE  1  91 DA        Le1ae:  STA     (aux),Y
00A1B0  1  F6 50                INC     noun_stk_l,X
00A1B2  1  90 E5                BCC     Le199
00A1B4  1  B4 50        Le1b4:  LDY     noun_stk_l,X
00A1B6  1  8A                   TXA
00A1B7  1  91 DA                STA     (aux),Y
00A1B9  1  E8                   INX
00A1BA  1  E8                   INX
00A1BB  1  60                   RTS
00A1BC  1               
00A1BC  1  B5 51        Se1bc:  LDA     noun_stk_l+1,X
00A1BE  1  85 DA                STA     aux
00A1C0  1  38                   SEC
00A1C1  1  E9 02                SBC     #$02
00A1C3  1  85 E4                STA     p2
00A1C5  1  B5 79                LDA     noun_stk_h_str+1,X
00A1C7  1  85 DB                STA     aux+1
00A1C9  1  E9 00                SBC     #$00
00A1CB  1  85 E5                STA     p2+1
00A1CD  1  A0 00                LDY     #$00
00A1CF  1  B1 E4                LDA     (p2),Y
00A1D1  1  18                   CLC
00A1D2  1  E5 DA                SBC     aux
00A1D4  1  85 E4                STA     p2
00A1D6  1  60                   RTS
00A1D7  1               
00A1D7  1               ; token $39 - "=" for string equality operator
00A1D7  1  B5 53        string_eq:      LDA     noun_stk_l+3,X
00A1D9  1  85 CE                STA     acc
00A1DB  1  B5 7B                LDA     noun_stk_h_str+3,X
00A1DD  1  85 CF                STA     acc+1
00A1DF  1  B5 51                LDA     noun_stk_l+1,X
00A1E1  1  85 DA                STA     aux
00A1E3  1  B5 79                LDA     noun_stk_h_str+1,X
00A1E5  1  85 DB                STA     aux+1
00A1E7  1  E8                   INX
00A1E8  1  E8                   INX
00A1E9  1  E8                   INX
00A1EA  1  A0 00                LDY     #$00
00A1EC  1  94 78                STY     noun_stk_h_str,X
00A1EE  1  94 A0                STY     noun_stk_h_int,X
00A1F0  1  C8                   INY
00A1F1  1  94 50                STY     noun_stk_l,X
00A1F3  1  B5 4D        Le1f3:  LDA     himem+1,X
00A1F5  1  D5 75                CMP     syn_stk_h+29,X
00A1F7  1  08                   PHP
00A1F8  1  48                   PHA
00A1F9  1  B5 4F                LDA     rnd+1,X
00A1FB  1  D5 77                CMP     syn_stk_h+31,X
00A1FD  1  90 07                BCC     Le206
00A1FF  1  68                   PLA
00A200  1  28                   PLP
00A201  1  B0 02                BCS     Le205
00A203  1  56 50        Le203:  LSR     noun_stk_l,X
00A205  1  60           Le205:  RTS
00A206  1  A8           Le206:  TAY
00A207  1  B1 CE                LDA     (acc),Y
00A209  1  85 E4                STA     p2
00A20B  1  68                   PLA
00A20C  1  A8                   TAY
00A20D  1  28                   PLP
00A20E  1  B0 F3                BCS     Le203
00A210  1  B1 DA                LDA     (aux),Y
00A212  1  C5 E4                CMP     p2
00A214  1  D0 ED                BNE     Le203
00A216  1  F6 4F                INC     rnd+1,X
00A218  1  F6 4D                INC     himem+1,X
00A21A  1  B0 D7                BCS     Le1f3
00A21C  1               
00A21C  1               ; token $3A - "#" for string inequality operator
00A21C  1  20 D7 A1     string_neq:     JSR     string_eq
00A21F  1  4C 36 A7             JMP     not_op
00A222  1               
00A222  1               ; token $14 - "*" for numeric multiplication
00A222  1  20 54 A2     mult_op:        JSR     Se254
00A225  1  06 CE        Le225:  ASL     acc
00A227  1  26 CF                ROL     acc+1
00A229  1  90 0D                BCC     Le238
00A22B  1  18                   CLC
00A22C  1  A5 E6                LDA     p3
00A22E  1  65 DA                ADC     aux
00A230  1  85 E6                STA     p3
00A232  1  A5 E7                LDA     p3+1
00A234  1  65 DB                ADC     aux+1
00A236  1  85 E7                STA     p3+1
00A238  1  88           Le238:  DEY
00A239  1  F0 09                BEQ     Le244
00A23B  1  06 E6                ASL     p3
00A23D  1  26 E7                ROL     p3+1
00A23F  1  10 E4                BPL     Le225
00A241  1  4C 7E A7             JMP     Le77e
00A244  1  A5 E6        Le244:  LDA     p3
00A246  1  20 08 A7             JSR     push_ya_noun_stk
00A249  1  A5 E7                LDA     p3+1
00A24B  1  95 A0                STA     noun_stk_h_int,X
00A24D  1  06 E5                ASL     p2+1
00A24F  1  90 28                BCC     Le279
00A251  1  4C 6F A7             JMP     negate
00A254  1               
00A254  1  A9 55        Se254:  LDA     #$55
00A256  1  85 E5                STA     p2+1
00A258  1  20 5B A2             JSR     Se25b
00A25B  1               
00A25B  1  A5 CE        Se25b:  LDA     acc
00A25D  1  85 DA                STA     aux
00A25F  1  A5 CF                LDA     acc+1
00A261  1  85 DB                STA     aux+1
00A263  1  20 15 A7             JSR     get16bit
00A266  1  84 E6                STY     p3
00A268  1  84 E7                STY     p3+1
00A26A  1  A5 CF                LDA     acc+1
00A26C  1  10 09                BPL     Le277
00A26E  1  CA                   DEX
00A26F  1  06 E5                ASL     p2+1
00A271  1  20 6F A7             JSR     negate
00A274  1  20 15 A7             JSR     get16bit
00A277  1  A0 10        Le277:  LDY     #$10
00A279  1  60           Le279:  RTS
00A27A  1               
00A27A  1               ; token $1f - "MOD"
00A27A  1  20 6C AE     mod_op: JSR     See6c
00A27D  1  F0 C5                BEQ     Le244
00A27F  1  FF                   .byte   $FF
00A280  1  C9 84        Le280:  CMP     #$84
00A282  1  D0 02                BNE     Le286
00A284  1  46 F8                LSR     auto_flag
00A286  1  C9 DF        Le286:  CMP     #$DF
00A288  1  F0 11                BEQ     Le29b
00A28A  1  C9 9B                CMP     #$9B
00A28C  1  F0 06                BEQ     Le294
00A28E  1  99 00 02             STA     buffer,Y
00A291  1  C8                   INY
00A292  1  10 0A                BPL     read_line
00A294  1  A0 8B        Le294:  LDY     #$8B
00A296  1  20 C4 A3             JSR     Se3c4
00A299  1               
00A299  1  A0 01        Se299:  LDY     #$01
00A29B  1  88           Le29b:  DEY
00A29C  1  30 F6                BMI     Le294
00A29E  1               
00A29E  1               ; read a line from keyboard (using rdkey) into buffer
00A29E  1  20 03 A0     read_line:      JSR     rdkey
00A2A1  1  EA                   NOP
00A2A2  1  EA                   NOP
00A2A3  1  20 C9 A3             JSR     cout
00A2A6  1  C9 8D                CMP     #$8D
00A2A8  1  D0 D6                BNE     Le280
00A2AA  1  A9 DF                LDA     #$DF
00A2AC  1  99 00 02             STA     buffer,Y
00A2AF  1  60                   RTS
00A2B0  1  20 D3 AF     cold:   JSR     mem_init_4k
00A2B3  1                       .export warm
00A2B3  1  20 CD A3     warm:   JSR     crout           ; BASIC warm start entry point
00A2B6  1  46 D9        Le2b6:  LSR     run_flag
00A2B8  1  A9 BE                LDA     #'>'+$80        ; Prompt character (high bit set)
00A2BA  1  20 C9 A3             JSR     cout
00A2BD  1  A0 00                LDY     #$00
00A2BF  1  84 FA                STY     leadzr
00A2C1  1  24 F8                BIT     auto_flag
00A2C3  1  10 0C                BPL     Le2d1
00A2C5  1  A6 F6                LDX     auto_ln
00A2C7  1  A5 F7                LDA     auto_ln+1
00A2C9  1  20 1B A5             JSR     prdec
00A2CC  1  A9 A0                LDA     #$A0
00A2CE  1  20 C9 A3             JSR     cout
00A2D1  1  A2 FF        Le2d1:  LDX     #$FF
00A2D3  1  9A                   TXS
00A2D4  1  20 9E A2             JSR     read_line
00A2D7  1  84 F1                STY     token_index
00A2D9  1  8A                   TXA
00A2DA  1  85 C8                STA     text_index
00A2DC  1  A2 20                LDX     #$20
00A2DE  1  20 91 A4             JSR     Se491
00A2E1  1  A5 C8                LDA     text_index
00A2E3  1  69 00                ADC     #$00
00A2E5  1  85 E0                STA     pverb
00A2E7  1  A9 00                LDA     #$00
00A2E9  1  AA                   TAX
00A2EA  1  69 02                ADC     #$02
00A2EC  1  85 E1                STA     pverb+1
00A2EE  1  A1 E0                LDA     (pverb,X)
00A2F0  1  29 F0                AND     #$F0
00A2F2  1  C9 B0                CMP     #$B0
00A2F4  1  F0 03                BEQ     Le2f9
00A2F6  1  4C 83 A8             JMP     Le883
00A2F9  1  A0 02        Le2f9:  LDY     #$02
00A2FB  1  B1 E0        Le2fb:  LDA     (pverb),Y
00A2FD  1  99 CD 00             STA     pv+1,Y
00A300  1  88                   DEY
00A301  1  D0 F8                BNE     Le2fb
00A303  1  20 8A A3             JSR     Se38a
00A306  1  A5 F1                LDA     token_index
00A308  1  E5 C8                SBC     text_index
00A30A  1  C9 04                CMP     #$04
00A30C  1  F0 A8                BEQ     Le2b6
00A30E  1  91 E0                STA     (pverb),Y
00A310  1  A5 CA                LDA     pp
00A312  1  F1 E0                SBC     (pverb),Y
00A314  1  85 E4                STA     p2
00A316  1  A5 CB                LDA     pp+1
00A318  1  E9 00                SBC     #$00
00A31A  1  85 E5                STA     p2+1
00A31C  1  A5 E4                LDA     p2
00A31E  1  C5 CC                CMP     pv
00A320  1  A5 E5                LDA     p2+1
00A322  1  E5 CD                SBC     pv+1
00A324  1  90 45                BCC     Le36b
00A326  1  A5 CA        Le326:  LDA     pp
00A328  1  F1 E0                SBC     (pverb),Y
00A32A  1  85 E6                STA     p3
00A32C  1  A5 CB                LDA     pp+1
00A32E  1  E9 00                SBC     #$00
00A330  1  85 E7                STA     p3+1
00A332  1  B1 CA                LDA     (pp),Y
00A334  1  91 E6                STA     (p3),Y
00A336  1  E6 CA                INC     pp
00A338  1  D0 02                BNE     Le33c
00A33A  1  E6 CB                INC     pp+1
00A33C  1  A5 E2        Le33c:  LDA     p1
00A33E  1  C5 CA                CMP     pp
00A340  1  A5 E3                LDA     p1+1
00A342  1  E5 CB                SBC     pp+1
00A344  1  B0 E0                BCS     Le326
00A346  1  B5 E4        Le346:  LDA     p2,X
00A348  1  95 CA                STA     pp,X
00A34A  1  CA                   DEX
00A34B  1  10 F9                BPL     Le346
00A34D  1  B1 E0                LDA     (pverb),Y
00A34F  1  A8                   TAY
00A350  1  88           Le350:  DEY
00A351  1  B1 E0                LDA     (pverb),Y
00A353  1  91 E6                STA     (p3),Y
00A355  1  98                   TYA
00A356  1  D0 F8                BNE     Le350
00A358  1  24 F8                BIT     auto_flag
00A35A  1  10 09                BPL     Le365
00A35C  1  B5 F7        Le35c:  LDA     auto_ln+1,X
00A35E  1  75 F5                ADC     auto_inc+1,X
00A360  1  95 F7                STA     auto_ln+1,X
00A362  1  E8                   INX
00A363  1  F0 F7                BEQ     Le35c
00A365  1  10 7E        Le365:  BPL     Le3e5
00A367  1  00 00 00 00          .byte   $00,$00,$00,$00
00A36B  1  A0 14        Le36b:  LDY     #$14
00A36D  1  D0 71                BNE     print_err_msg
00A36F  1               
00A36F  1               ; token $0a - "," in DEL command
00A36F  1  20 15 A7     del_comma:      JSR     get16bit
00A372  1  A5 E2                LDA     p1
00A374  1  85 E6                STA     p3
00A376  1  A5 E3                LDA     p1+1
00A378  1  85 E7                STA     p3+1
00A37A  1  20 75 A5             JSR     find_line1
00A37D  1  A5 E2                LDA     p1
00A37F  1  85 E4                STA     p2
00A381  1  A5 E3                LDA     p1+1
00A383  1  85 E5                STA     p2+1
00A385  1  D0 0E                BNE     Le395
00A387  1               
00A387  1               ; token $09 - "DEL"
00A387  1  20 15 A7     del_cmd:        JSR     get16bit
00A38A  1               
00A38A  1  20 6D A5     Se38a:  JSR     find_line
00A38D  1  A5 E6                LDA     p3
00A38F  1  85 E2                STA     p1
00A391  1  A5 E7                LDA     p3+1
00A393  1  85 E3                STA     p1+1
00A395  1  A0 00        Le395:  LDY     #$00
00A397  1  A5 CA        Le397:  LDA     pp
00A399  1  C5 E4                CMP     p2
00A39B  1  A5 CB                LDA     pp+1
00A39D  1  E5 E5                SBC     p2+1
00A39F  1  B0 16                BCS     Le3b7
00A3A1  1  A5 E4                LDA     p2
00A3A3  1  D0 02                BNE     Le3a7
00A3A5  1  C6 E5                DEC     p2+1
00A3A7  1  C6 E4        Le3a7:  DEC     p2
00A3A9  1  A5 E6                LDA     p3
00A3AB  1  D0 02                BNE     Le3af
00A3AD  1  C6 E7                DEC     p3+1
00A3AF  1  C6 E6        Le3af:  DEC     p3
00A3B1  1  B1 E4                LDA     (p2),Y
00A3B3  1  91 E6                STA     (p3),Y
00A3B5  1  90 E0                BCC     Le397
00A3B7  1  A5 E6        Le3b7:  LDA     p3
00A3B9  1  85 CA                STA     pp
00A3BB  1  A5 E7                LDA     p3+1
00A3BD  1  85 CB                STA     pp+1
00A3BF  1  60                   RTS
00A3C0  1  20 C9 A3     Le3c0:  JSR     cout
00A3C3  1  C8                   INY
00A3C4  1               
00A3C4  1  B9 00 AB     Se3c4:  LDA     error_msg_tbl,Y
00A3C7  1  30 F7                BMI     Le3c0
00A3C9  1               
00A3C9  1  C9 8D        cout:   CMP     #$8D
00A3CB  1  D0 06                BNE     Le3d3
00A3CD  1               
00A3CD  1  A9 00        crout:  LDA     #$00            ; character output
00A3CF  1  85 24                STA     ch
00A3D1  1  A9 8D                LDA     #$8D
00A3D3  1  E6 24        Le3d3:  INC     ch
00A3D5  1               
00A3D5  1               ; Send character to display. Char is in A.
00A3D5  1  2C 12 D0     Le3d5:  BIT     DSP          ; See if display ready
00A3D8  1  30 FB                BMI     Le3d5        ; Loop if not
00A3DA  1  8D 12 D0             STA     DSP          ; Write display data
00A3DD  1  60                   RTS                  ; and return
00A3DE  1               
00A3DE  1  A0 06        too_long_err:   LDY     #$06
00A3E0  1               
00A3E0  1  20 D3 AE     print_err_msg:  JSR     print_err_msg1  ; print error message specified in Y
00A3E3  1  24 D9                BIT     run_flag
00A3E5  1  30 03        Le3e5:  BMI     Le3ea
00A3E7  1  4C B6 A2             JMP     Le2b6
00A3EA  1  4C 9A AB     Le3ea:  JMP     Leb9a
00A3ED  1  2A           Le3ed:  ROL
00A3EE  1  69 A0                ADC     #$A0
00A3F0  1  DD 00 02             CMP     buffer,X
00A3F3  1  D0 53                BNE     Le448
00A3F5  1  B1 FE                LDA     (synpag),Y
00A3F7  1  0A                   ASL
00A3F8  1  30 06                BMI     Le400
00A3FA  1  88                   DEY
00A3FB  1  B1 FE                LDA     (synpag),Y
00A3FD  1  30 29                BMI     Le428
00A3FF  1  C8                   INY
00A400  1  86 C8        Le400:  STX     text_index
00A402  1  98                   TYA
00A403  1  48                   PHA
00A404  1  A2 00                LDX     #$00
00A406  1  A1 FE                LDA     (synpag,X)
00A408  1  AA                   TAX
00A409  1  4A           Le409:  LSR
00A40A  1  49 48                EOR     #$48
00A40C  1  11 FE                ORA     (synpag),Y
00A40E  1  C9 C0                CMP     #$C0
00A410  1  90 01                BCC     Le413
00A412  1  E8                   INX
00A413  1  C8           Le413:  INY
00A414  1  D0 F3                BNE     Le409
00A416  1  68                   PLA
00A417  1  A8                   TAY
00A418  1  8A                   TXA
00A419  1  4C C0 A4             JMP     Le4c0
00A41C  1               
00A41C  1               ; write a token to the buffer
00A41C  1               ; buffer [++tokndx] = A
00A41C  1  E6 F1        put_token:      INC     token_index
00A41E  1  A6 F1                LDX     token_index
00A420  1  F0 BC                BEQ     too_long_err
00A422  1  9D 00 02             STA     buffer,X
00A425  1  60           Le425:  RTS
00A426  1  A6 C8        Le426:  LDX     text_index
00A428  1  A9 A0        Le428:  LDA     #$A0
00A42A  1  E8           Le42a:  INX
00A42B  1  DD 00 02             CMP     buffer,X
00A42E  1  B0 FA                BCS     Le42a
00A430  1  B1 FE                LDA     (synpag),Y
00A432  1  29 3F                AND     #$3F
00A434  1  4A                   LSR
00A435  1  D0 B6                BNE     Le3ed
00A437  1  BD 00 02             LDA     buffer,X
00A43A  1  B0 06                BCS     Le442
00A43C  1  69 3F                ADC     #$3F
00A43E  1  C9 1A                CMP     #$1A
00A440  1  90 6F                BCC     Le4b1
00A442  1  69 4F        Le442:  ADC     #$4F
00A444  1  C9 0A                CMP     #$0A
00A446  1  90 69                BCC     Le4b1
00A448  1  A6 FD        Le448:  LDX     synstkdx
00A44A  1  C8           Le44a:  INY
00A44B  1  B1 FE                LDA     (synpag),Y
00A44D  1  29 E0                AND     #$E0
00A44F  1  C9 20                CMP     #$20
00A451  1  F0 7A                BEQ     Le4cd
00A453  1  B5 A8                LDA     txtndxstk,X
00A455  1  85 C8                STA     text_index
00A457  1  B5 D1                LDA     tokndxstk,X
00A459  1  85 F1                STA     token_index
00A45B  1  88           Le45b:  DEY
00A45C  1  B1 FE                LDA     (synpag),Y
00A45E  1  0A                   ASL
00A45F  1  10 FA                BPL     Le45b
00A461  1  88                   DEY
00A462  1  B0 38                BCS     Le49c
00A464  1  0A                   ASL
00A465  1  30 35                BMI     Le49c
00A467  1  B4 58                LDY     syn_stk_h,X
00A469  1  84 FF                STY     synpag+1
00A46B  1  B4 80                LDY     syn_stk_l,X
00A46D  1  E8                   INX
00A46E  1  10 DA                BPL     Le44a
00A470  1  F0 B3        Le470:  BEQ     Le425
00A472  1  C9 7E                CMP     #$7E
00A474  1  B0 22                BCS     Le498
00A476  1  CA                   DEX
00A477  1  10 04                BPL     Le47d
00A479  1  A0 06                LDY     #$06
00A47B  1  10 29                BPL     go_errmess_2
00A47D  1  94 80        Le47d:  STY     syn_stk_l,X
00A47F  1  A4 FF                LDY     synpag+1
00A481  1  94 58                STY     syn_stk_h,X
00A483  1  A4 C8                LDY     text_index
00A485  1  94 A8                STY     txtndxstk,X
00A487  1  A4 F1                LDY     token_index
00A489  1  94 D1                STY     tokndxstk,X
00A48B  1  29 1F                AND     #$1F
00A48D  1  A8                   TAY
00A48E  1  B9 20 AC             LDA     syntabl_index,Y
00A491  1               
00A491  1  0A           Se491:  ASL
00A492  1  A8                   TAY
00A493  1  A9 56                LDA     #$56         ; Manual Change by W4JBM
00A495  1  2A                   ROL
00A496  1  85 FF                STA     synpag+1
00A498  1  D0 01        Le498:  BNE     Le49b
00A49A  1  C8                   INY
00A49B  1  C8           Le49b:  INY
00A49C  1  86 FD        Le49c:  STX     synstkdx
00A49E  1  B1 FE                LDA     (synpag),Y
00A4A0  1  30 84                BMI     Le426
00A4A2  1  D0 05                BNE     Le4a9
00A4A4  1  A0 0E                LDY     #$0E
00A4A6  1  4C E0 A3     go_errmess_2:   JMP     print_err_msg
00A4A9  1  C9 03        Le4a9:  CMP     #$03
00A4AB  1  B0 C3                BCS     Le470
00A4AD  1  4A                   LSR
00A4AE  1  A6 C8                LDX     text_index
00A4B0  1  E8                   INX
00A4B1  1  BD 00 02     Le4b1:  LDA     buffer,X
00A4B4  1  90 04                BCC     Le4ba
00A4B6  1  C9 A2                CMP     #$A2
00A4B8  1  F0 0A                BEQ     Le4c4
00A4BA  1  C9 DF        Le4ba:  CMP     #$DF
00A4BC  1  F0 06                BEQ     Le4c4
00A4BE  1  86 C8                STX     text_index
00A4C0  1  20 1C A4     Le4c0:  JSR     put_token
00A4C3  1  C8                   INY
00A4C4  1  88           Le4c4:  DEY
00A4C5  1  A6 FD                LDX     synstkdx
00A4C7  1  B1 FE        Le4c7:  LDA     (synpag),Y
00A4C9  1  88                   DEY
00A4CA  1  0A                   ASL
00A4CB  1  10 CF                BPL     Le49c
00A4CD  1  B4 58        Le4cd:  LDY     syn_stk_h,X
00A4CF  1  84 FF                STY     synpag+1
00A4D1  1  B4 80                LDY     syn_stk_l,X
00A4D3  1  E8                   INX
00A4D4  1  B1 FE                LDA     (synpag),Y
00A4D6  1  29 9F                AND     #$9F
00A4D8  1  D0 ED                BNE     Le4c7
00A4DA  1  85 F2                STA     pcon
00A4DC  1  85 F3                STA     pcon+1
00A4DE  1  98                   TYA
00A4DF  1  48                   PHA
00A4E0  1  86 FD                STX     synstkdx
00A4E2  1  B4 D0                LDY     srch,X
00A4E4  1  84 C9                STY     leadbl
00A4E6  1  18                   CLC
00A4E7  1  A9 0A        Le4e7:  LDA     #$0A
00A4E9  1  85 F9                STA     char
00A4EB  1  A2 00                LDX     #$00
00A4ED  1  C8                   INY
00A4EE  1  B9 00 02             LDA     buffer,Y
00A4F1  1  29 0F                AND     #$0F
00A4F3  1  65 F2        Le4f3:  ADC     pcon
00A4F5  1  48                   PHA
00A4F6  1  8A                   TXA
00A4F7  1  65 F3                ADC     pcon+1
00A4F9  1  30 1C                BMI     Le517
00A4FB  1  AA                   TAX
00A4FC  1  68                   PLA
00A4FD  1  C6 F9                DEC     char
00A4FF  1  D0 F2                BNE     Le4f3
00A501  1  85 F2                STA     pcon
00A503  1  86 F3                STX     pcon+1
00A505  1  C4 F1                CPY     token_index
00A507  1  D0 DE                BNE     Le4e7
00A509  1  A4 C9                LDY     leadbl
00A50B  1  C8                   INY
00A50C  1  84 F1                STY     token_index
00A50E  1  20 1C A4             JSR     put_token
00A511  1  68                   PLA
00A512  1  A8                   TAY
00A513  1  A5 F3                LDA     pcon+1
00A515  1  B0 A9                BCS     Le4c0
00A517  1  A0 00        Le517:  LDY     #$00
00A519  1  10 8B                BPL     go_errmess_2
00A51B  1               
00A51B  1  85 F3        prdec:  STA     pcon+1  ; output A:X in decimal
00A51D  1  86 F2                STX     pcon
00A51F  1  A2 04                LDX     #$04
00A521  1  86 C9                STX     leadbl
00A523  1  A9 B0        Le523:  LDA     #$B0
00A525  1  85 F9                STA     char
00A527  1  A5 F2        Le527:  LDA     pcon
00A529  1  DD 63 A5             CMP     dectabl,X
00A52C  1  A5 F3                LDA     pcon+1
00A52E  1  FD 68 A5             SBC     dectabh,X
00A531  1  90 0D                BCC     Le540
00A533  1  85 F3                STA     pcon+1
00A535  1  A5 F2                LDA     pcon
00A537  1  FD 63 A5             SBC     dectabl,X
00A53A  1  85 F2                STA     pcon
00A53C  1  E6 F9                INC     char
00A53E  1  D0 E7                BNE     Le527
00A540  1  A5 F9        Le540:  LDA     char
00A542  1  E8                   INX
00A543  1  CA                   DEX
00A544  1  F0 0E                BEQ     Le554
00A546  1  C9 B0                CMP     #$B0
00A548  1  F0 02                BEQ     Le54c
00A54A  1  85 C9                STA     leadbl
00A54C  1  24 C9        Le54c:  BIT     leadbl
00A54E  1  30 04                BMI     Le554
00A550  1  A5 FA                LDA     leadzr
00A552  1  F0 0B                BEQ     Le55f
00A554  1  20 C9 A3     Le554:  JSR     cout
00A557  1  24 F8                BIT     auto_flag
00A559  1  10 04                BPL     Le55f
00A55B  1  99 00 02             STA     buffer,Y
00A55E  1  C8                   INY
00A55F  1  CA           Le55f:  DEX
00A560  1  10 C1                BPL     Le523
00A562  1  60                   RTS
00A563  1               ; powers of 10 table, low byte
00A563  1  01 0A 64 E8  dectabl:        .byte   $01,$0A,$64,$E8,$10             ; "..dh."
00A567  1  10           
00A568  1               
00A568  1               ; powers of 10 table, high byte
00A568  1  00 00 00 03  dectabh:        .byte   $00,$00,$00,$03,$27             ; "....'"
00A56C  1  27           
00A56D  1               
00A56D  1  A5 CA        find_line:      LDA     pp
00A56F  1  85 E6                STA     p3
00A571  1  A5 CB                LDA     pp+1
00A573  1  85 E7                STA     p3+1
00A575  1               
00A575  1  E8           find_line1:     INX
00A576  1               
00A576  1  A5 E7        find_line2:     LDA     p3+1
00A578  1  85 E5                STA     p2+1
00A57A  1  A5 E6                LDA     p3
00A57C  1  85 E4                STA     p2
00A57E  1  C5 4C                CMP     himem
00A580  1  A5 E5                LDA     p2+1
00A582  1  E5 4D                SBC     himem+1
00A584  1  B0 26                BCS     Le5ac
00A586  1  A0 01                LDY     #$01
00A588  1  B1 E4                LDA     (p2),Y
00A58A  1  E5 CE                SBC     acc
00A58C  1  C8                   INY
00A58D  1  B1 E4                LDA     (p2),Y
00A58F  1  E5 CF                SBC     acc+1
00A591  1  B0 19                BCS     Le5ac
00A593  1  A0 00                LDY     #$00
00A595  1  A5 E6                LDA     p3
00A597  1  71 E4                ADC     (p2),Y
00A599  1  85 E6                STA     p3
00A59B  1  90 03                BCC     Le5a0
00A59D  1  E6 E7                INC     p3+1
00A59F  1  18                   CLC
00A5A0  1  C8           Le5a0:  INY
00A5A1  1  A5 CE                LDA     acc
00A5A3  1  F1 E4                SBC     (p2),Y
00A5A5  1  C8                   INY
00A5A6  1  A5 CF                LDA     acc+1
00A5A8  1  F1 E4                SBC     (p2),Y
00A5AA  1  B0 CA                BCS     find_line2
00A5AC  1  60           Le5ac:  RTS
00A5AD  1               
00A5AD  1               ; token $0B - "NEW"
00A5AD  1  46 F8        new_cmd:        LSR     auto_flag
00A5AF  1  A5 4C                LDA     himem
00A5B1  1  85 CA                STA     pp
00A5B3  1  A5 4D                LDA     himem+1
00A5B5  1  85 CB                STA     pp+1
00A5B7  1               
00A5B7  1               ; token $0C - "CLR"
00A5B7  1  A5 4A        clr:    LDA     lomem
00A5B9  1  85 CC                STA     pv
00A5BB  1  A5 4B                LDA     lomem+1
00A5BD  1  85 CD                STA     pv+1
00A5BF  1  A9 00                LDA     #$00
00A5C1  1  85 FB                STA     for_nest_count
00A5C3  1  85 FC                STA     gosub_nest_count
00A5C5  1  85 FE                STA     synpag
00A5C7  1  A9 00                LDA     #$00
00A5C9  1  85 1D                STA     Z1d
00A5CB  1  60                   RTS
00A5CC  1  A5 D0        Le5cc:  LDA     srch
00A5CE  1  69 05                ADC     #$05
00A5D0  1  85 D2                STA     srch2
00A5D2  1  A5 D1                LDA     tokndxstk
00A5D4  1  69 00                ADC     #$00
00A5D6  1  85 D3                STA     srch2+1
00A5D8  1  A5 D2                LDA     srch2
00A5DA  1  C5 CA                CMP     pp
00A5DC  1  A5 D3                LDA     srch2+1
00A5DE  1  E5 CB                SBC     pp+1
00A5E0  1  90 03                BCC     Le5e5
00A5E2  1  4C 6B A3             JMP     Le36b
00A5E5  1  A5 CE        Le5e5:  LDA     acc
00A5E7  1  91 D0                STA     (srch),Y
00A5E9  1  A5 CF                LDA     acc+1
00A5EB  1  C8                   INY
00A5EC  1  91 D0                STA     (srch),Y
00A5EE  1  A5 D2                LDA     srch2
00A5F0  1  C8                   INY
00A5F1  1  91 D0                STA     (srch),Y
00A5F3  1  A5 D3                LDA     srch2+1
00A5F5  1  C8                   INY
00A5F6  1  91 D0                STA     (srch),Y
00A5F8  1  A9 00                LDA     #$00
00A5FA  1  C8                   INY
00A5FB  1  91 D0                STA     (srch),Y
00A5FD  1  C8                   INY
00A5FE  1  91 D0                STA     (srch),Y
00A600  1  A5 D2                LDA     srch2
00A602  1  85 CC                STA     pv
00A604  1  A5 D3                LDA     srch2+1
00A606  1  85 CD                STA     pv+1
00A608  1  A5 D0                LDA     srch
00A60A  1  90 43                BCC     Le64f
00A60C  1  85 CE        execute_var:    STA     acc
00A60E  1  84 CF                STY     acc+1
00A610  1  20 FF A6             JSR     get_next_prog_byte
00A613  1  30 0E                BMI     Le623
00A615  1  C9 40                CMP     #$40
00A617  1  F0 0A                BEQ     Le623
00A619  1  4C 28 A6             JMP     Le628
00A61C  1  06 C9 49 D0          .byte   $06,$C9,$49,$D0,$07,$A9,$49
00A620  1  07 A9 49     
00A623  1  85 CF        Le623:  STA     acc+1
00A625  1  20 FF A6             JSR     get_next_prog_byte
00A628  1  A5 4B        Le628:  LDA     lomem+1
00A62A  1  85 D1                STA     tokndxstk
00A62C  1  A5 4A                LDA     lomem
00A62E  1  85 D0        Le62e:  STA     srch
00A630  1  C5 CC                CMP     pv
00A632  1  A5 D1                LDA     tokndxstk
00A634  1  E5 CD                SBC     pv+1
00A636  1  B0 94                BCS     Le5cc
00A638  1  B1 D0                LDA     (srch),Y
00A63A  1  C8                   INY
00A63B  1  C5 CE                CMP     acc
00A63D  1  D0 06                BNE     Le645
00A63F  1  B1 D0                LDA     (srch),Y
00A641  1  C5 CF                CMP     acc+1
00A643  1  F0 0E                BEQ     Le653
00A645  1  C8           Le645:  INY
00A646  1  B1 D0                LDA     (srch),Y
00A648  1  48                   PHA
00A649  1  C8                   INY
00A64A  1  B1 D0                LDA     (srch),Y
00A64C  1  85 D1                STA     tokndxstk
00A64E  1  68                   PLA
00A64F  1  A0 00        Le64f:  LDY     #$00
00A651  1  F0 DB                BEQ     Le62e
00A653  1  A5 D0        Le653:  LDA     srch
00A655  1  69 03                ADC     #$03
00A657  1  20 0A A7             JSR     push_a_noun_stk
00A65A  1  A5 D1                LDA     tokndxstk
00A65C  1  69 00                ADC     #$00
00A65E  1  95 78                STA     noun_stk_h_str,X
00A660  1  A5 CF                LDA     acc+1
00A662  1  C9 40                CMP     #$40
00A664  1  D0 1C                BNE     fetch_prog_byte
00A666  1  88                   DEY
00A667  1  98                   TYA
00A668  1  20 0A A7             JSR     push_a_noun_stk
00A66B  1  88                   DEY
00A66C  1  94 78                STY     noun_stk_h_str,X
00A66E  1  A0 03                LDY     #$03
00A670  1  F6 78        Le670:  INC     noun_stk_h_str,X
00A672  1  C8                   INY
00A673  1  B1 D0                LDA     (srch),Y
00A675  1  30 F9                BMI     Le670
00A677  1  10 09                BPL     fetch_prog_byte
00A679  1               
00A679  1  A9 00        execute_stmt:   LDA     #$00
00A67B  1  85 D4                STA     if_flag
00A67D  1  85 D5                STA     cr_flag
00A67F  1  A2 20                LDX     #$20
00A681  1               
00A681  1               ; push old verb on stack for later use in precedence test
00A681  1  48           push_old_verb:  PHA
00A682  1  A0 00        fetch_prog_byte:        LDY     #$00
00A684  1  B1 E0                LDA     (pverb),Y
00A686  1  10 18        Le686:  BPL     execute_token
00A688  1  0A                   ASL
00A689  1  30 81                BMI     execute_var
00A68B  1  20 FF A6             JSR     get_next_prog_byte
00A68E  1  20 08 A7             JSR     push_ya_noun_stk
00A691  1  20 FF A6             JSR     get_next_prog_byte
00A694  1  95 A0                STA     noun_stk_h_int,X
00A696  1  24 D4        Le696:  BIT     if_flag
00A698  1  10 01                BPL     Le69b
00A69A  1  CA                   DEX
00A69B  1  20 FF A6     Le69b:  JSR     get_next_prog_byte
00A69E  1  B0 E6                BCS     Le686
00A6A0  1               
00A6A0  1  C9 28        execute_token:  CMP     #$28
00A6A2  1  D0 1F                BNE     execute_verb
00A6A4  1  A5 E0                LDA     pverb
00A6A6  1  20 0A A7             JSR     push_a_noun_stk
00A6A9  1  A5 E1                LDA     pverb+1
00A6AB  1  95 78                STA     noun_stk_h_str,X
00A6AD  1  24 D4                BIT     if_flag
00A6AF  1  30 0B                BMI     Le6bc
00A6B1  1  A9 01                LDA     #$01
00A6B3  1  20 0A A7             JSR     push_a_noun_stk
00A6B6  1  A9 00                LDA     #$00
00A6B8  1  95 78                STA     noun_stk_h_str,X
00A6BA  1  F6 78        Le6ba:  INC     noun_stk_h_str,X
00A6BC  1  20 FF A6     Le6bc:  JSR     get_next_prog_byte
00A6BF  1  30 F9                BMI     Le6ba
00A6C1  1  B0 D3                BCS     Le696
00A6C3  1  24 D4        execute_verb:   BIT     if_flag
00A6C5  1  10 06                BPL     Le6cd
00A6C7  1  C9 04                CMP     #$04
00A6C9  1  B0 D0                BCS     Le69b
00A6CB  1  46 D4                LSR     if_flag
00A6CD  1  A8           Le6cd:  TAY
00A6CE  1  85 D6                STA     current_verb
00A6D0  1  B9 98 A9             LDA     verb_prec_tbl,Y
00A6D3  1  29 55                AND     #$55
00A6D5  1  0A                   ASL
00A6D6  1  85 D7                STA     precedence
00A6D8  1  68           Le6d8:  PLA
00A6D9  1  A8                   TAY
00A6DA  1  B9 98 A9             LDA     verb_prec_tbl,Y
00A6DD  1  29 AA                AND     #$AA
00A6DF  1  C5 D7                CMP     precedence
00A6E1  1  B0 09                BCS     do_verb
00A6E3  1  98                   TYA
00A6E4  1  48                   PHA
00A6E5  1  20 FF A6             JSR     get_next_prog_byte
00A6E8  1  A5 D6                LDA     current_verb
00A6EA  1  90 95                BCC     push_old_verb
00A6EC  1  B9 10 AA     do_verb:        LDA     verb_adr_l,Y
00A6EF  1  85 CE                STA     acc
00A6F1  1  B9 88 AA             LDA     verb_adr_h,Y
00A6F4  1  85 CF                STA     acc+1
00A6F6  1  20 FC A6             JSR     Se6fc
00A6F9  1  4C D8 A6             JMP     Le6d8
00A6FC  1               
00A6FC  1  6C CE 00     Se6fc:  JMP     (acc)
00A6FF  1               
00A6FF  1  E6 E0        get_next_prog_byte:     INC     pverb
00A701  1  D0 02                BNE     Le705
00A703  1  E6 E1                INC     pverb+1
00A705  1  B1 E0        Le705:  LDA     (pverb),Y
00A707  1  60                   RTS
00A708  1               
00A708  1  94 77        push_ya_noun_stk:       STY     syn_stk_h+31,X
00A70A  1               
00A70A  1  CA           push_a_noun_stk:        DEX
00A70B  1  30 03                BMI     Le710
00A70D  1  95 50                STA     noun_stk_l,X
00A70F  1  60                   RTS
00A710  1  A0 66        Le710:  LDY     #$66
00A712  1  4C E0 A3     go_errmess_3:   JMP     print_err_msg
00A715  1               
00A715  1  A0 00        get16bit:       LDY     #$00
00A717  1  B5 50                LDA     noun_stk_l,X
00A719  1  85 CE                STA     acc
00A71B  1  B5 A0                LDA     noun_stk_h_int,X
00A71D  1  85 CF                STA     acc+1
00A71F  1  B5 78                LDA     noun_stk_h_str,X
00A721  1  F0 0E                BEQ     Le731
00A723  1  85 CF                STA     acc+1
00A725  1  B1 CE                LDA     (acc),Y
00A727  1  48                   PHA
00A728  1  C8                   INY
00A729  1  B1 CE                LDA     (acc),Y
00A72B  1  85 CF                STA     acc+1
00A72D  1  68                   PLA
00A72E  1  85 CE                STA     acc
00A730  1  88                   DEY
00A731  1  E8           Le731:  INX
00A732  1  60                   RTS
00A733  1               
00A733  1               ; token $16 - "=" for numeric equality operator
00A733  1  20 4A A7     eq_op:  JSR     neq_op
00A736  1               
00A736  1               ; token $37 - "NOT"
00A736  1  20 15 A7     not_op: JSR     get16bit
00A739  1  98                   TYA
00A73A  1  20 08 A7             JSR     push_ya_noun_stk
00A73D  1  95 A0                STA     noun_stk_h_int,X
00A73F  1  C5 CE                CMP     acc
00A741  1  D0 06                BNE     Le749
00A743  1  C5 CF                CMP     acc+1
00A745  1  D0 02                BNE     Le749
00A747  1  F6 50                INC     noun_stk_l,X
00A749  1  60           Le749:  RTS
00A74A  1               
00A74A  1               ; token $17 - "#" for numeric inequality operator
00A74A  1               ; token $1B - "<>" for numeric inequality operator
00A74A  1  20 82 A7     neq_op: JSR     subtract
00A74D  1  20 59 A7             JSR     sgn_fn
00A750  1               
00A750  1               ; token $31 - "ABS"
00A750  1  20 15 A7     abs_fn: JSR     get16bit
00A753  1  24 CF                BIT     acc+1
00A755  1  30 1B                BMI     Se772
00A757  1  CA           Le757:  DEX
00A758  1  60           Le758:  RTS
00A759  1               
00A759  1               ; token $30 - "SGN"
00A759  1  20 15 A7     sgn_fn: JSR     get16bit
00A75C  1  A5 CF                LDA     acc+1
00A75E  1  D0 04                BNE     Le764
00A760  1  A5 CE                LDA     acc
00A762  1  F0 F3                BEQ     Le757
00A764  1  A9 FF        Le764:  LDA     #$FF
00A766  1  20 08 A7             JSR     push_ya_noun_stk
00A769  1  95 A0                STA     noun_stk_h_int,X
00A76B  1  24 CF                BIT     acc+1
00A76D  1  30 E9                BMI     Le758
00A76F  1               
00A76F  1               ; token $36 - "-" for unary negation
00A76F  1  20 15 A7     negate: JSR     get16bit
00A772  1               
00A772  1  98           Se772:  TYA
00A773  1  38                   SEC
00A774  1  E5 CE                SBC     acc
00A776  1  20 08 A7             JSR     push_ya_noun_stk
00A779  1  98                   TYA
00A77A  1  E5 CF                SBC     acc+1
00A77C  1  50 23                BVC     Le7a1
00A77E  1  A0 00        Le77e:  LDY     #$00
00A780  1  10 90                BPL     go_errmess_3
00A782  1               
00A782  1               ; token $13 - "-" for numeric subtraction
00A782  1  20 6F A7     subtract:       JSR     negate
00A785  1               
00A785  1               ; token $12 - "+" for numeric addition
00A785  1  20 15 A7     add:    JSR     get16bit
00A788  1  A5 CE                LDA     acc
00A78A  1  85 DA                STA     aux
00A78C  1  A5 CF                LDA     acc+1
00A78E  1  85 DB                STA     aux+1
00A790  1  20 15 A7             JSR     get16bit
00A793  1               
00A793  1  18           Se793:  CLC
00A794  1  A5 CE                LDA     acc
00A796  1  65 DA                ADC     aux
00A798  1  20 08 A7             JSR     push_ya_noun_stk
00A79B  1  A5 CF                LDA     acc+1
00A79D  1  65 DB                ADC     aux+1
00A79F  1  70 DD                BVS     Le77e
00A7A1  1  95 A0        Le7a1:  STA     noun_stk_h_int,X
00A7A3  1               
00A7A3  1               ; token $35 - "+" for unary positive
00A7A3  1  60           unary_pos:      RTS
00A7A4  1               
00A7A4  1               ; token $50 - "TAB" function
00A7A4  1  20 15 A7     tab_fn: JSR     get16bit
00A7A7  1  A4 CE                LDY     acc
00A7A9  1  F0 05                BEQ     Le7b0
00A7AB  1  88                   DEY
00A7AC  1  A5 CF                LDA     acc+1
00A7AE  1  F0 0C                BEQ     Le7bc
00A7B0  1  60           Le7b0:  RTS
00A7B1  1               
00A7B1  1               ; horizontal tab
00A7B1  1  A5 24        tabout: LDA     ch
00A7B3  1  09 07                ORA     #$07
00A7B5  1  A8                   TAY
00A7B6  1  C8                   INY
00A7B7  1  A9 A0        Le7b7:  LDA     #$A0
00A7B9  1  20 C9 A3             JSR     cout
00A7BC  1  C4 24        Le7bc:  CPY     ch
00A7BE  1  B0 F7                BCS     Le7b7
00A7C0  1  60                   RTS
00A7C1  1               
00A7C1  1               ; token $49 - "," in print, numeric follows
00A7C1  1  20 B1 A7     print_com_num:  JSR     tabout
00A7C4  1               
00A7C4  1               ; token $62 - "PRINT" numeric
00A7C4  1  20 15 A7     print_num:      JSR     get16bit
00A7C7  1  A5 CF                LDA     acc+1
00A7C9  1  10 0A                BPL     Le7d5
00A7CB  1  A9 AD                LDA     #$AD
00A7CD  1  20 C9 A3             JSR     cout
00A7D0  1  20 72 A7             JSR     Se772
00A7D3  1  50 EF                BVC     print_num
00A7D5  1  88           Le7d5:  DEY
00A7D6  1  84 D5                STY     cr_flag
00A7D8  1  86 CF                STX     acc+1
00A7DA  1  A6 CE                LDX     acc
00A7DC  1  20 1B A5             JSR     prdec
00A7DF  1  A6 CF                LDX     acc+1
00A7E1  1  60                   RTS
00A7E2  1               
00A7E2  1               ; token $0D - "AUTO" command
00A7E2  1  20 15 A7     auto_cmd:       JSR     get16bit
00A7E5  1  A5 CE                LDA     acc
00A7E7  1  85 F6                STA     auto_ln
00A7E9  1  A5 CF                LDA     acc+1
00A7EB  1  85 F7                STA     auto_ln+1
00A7ED  1  88                   DEY
00A7EE  1  84 F8                STY     auto_flag
00A7F0  1  C8                   INY
00A7F1  1  A9 0A                LDA     #$0A
00A7F3  1  85 F4        Le7f3:  STA     auto_inc
00A7F5  1  84 F5                STY     auto_inc+1
00A7F7  1  60                   RTS
00A7F8  1               
00A7F8  1               ; token $0E - "," in AUTO command
00A7F8  1  20 15 A7     auto_com:       JSR     get16bit
00A7FB  1  A5 CE                LDA     acc
00A7FD  1  A4 CF                LDY     acc+1
00A7FF  1  10 F2                BPL     Le7f3
00A801  1               
00A801  1               ; token $56 - "=" in FOR statement
00A801  1               ; token $71 - "=" in LET (or implied LET) statement
00A801  1  20 15 A7     var_assign:     JSR     get16bit
00A804  1  B5 50                LDA     noun_stk_l,X
00A806  1  85 DA                STA     aux
00A808  1  B5 78                LDA     noun_stk_h_str,X
00A80A  1  85 DB                STA     aux+1
00A80C  1  A5 CE                LDA     acc
00A80E  1  91 DA                STA     (aux),Y
00A810  1  C8                   INY
00A811  1  A5 CF                LDA     acc+1
00A813  1  91 DA                STA     (aux),Y
00A815  1  E8                   INX
00A816  1               
00A816  1  60           Te816:  RTS
00A817  1               
00A817  1               ; token $00 - begining of line
00A817  1               begin_line:
00A817  1  68                   PLA
00A818  1  68                   PLA
00A819  1               
00A819  1               ; token $03 - ":" statement separator
00A819  1  24 D5        colon:  BIT     cr_flag
00A81B  1  10 05                BPL     Le822
00A81D  1               
00A81D  1               ; token $63 - "PRINT" with no arg
00A81D  1  20 CD A3     print_cr:       JSR     crout
00A820  1               
00A820  1               ; token $47 - ";" at end of print statement
00A820  1  46 D5        print_semi:     LSR     cr_flag
00A822  1  60           Le822:  RTS
00A823  1               
00A823  1               
00A823  1               ; token $22 - "(" in string DIM
00A823  1               ; token $34 - "(" in numeric DIM
00A823  1               ; token $38 - "(" in numeric expression
00A823  1               ; token $3F - "(" in some PEEK, RND, SGN, ABS (PDL)
00A823  1  A0 FF        left_paren:     LDY     #$FF
00A825  1  84 D7                STY     precedence
00A827  1               
00A827  1               ; token $72 - ")" everywhere
00A827  1  60           right_paren:    RTS
00A828  1               
00A828  1               ; token $60 - "IF" statement
00A828  1  20 CD AF     if_stmt:        JSR     Sefcd
00A82B  1  F0 07                BEQ     Le834
00A82D  1  A9 25                LDA     #$25
00A82F  1  85 D6                STA     current_verb
00A831  1  88                   DEY
00A832  1  84 D4                STY     if_flag
00A834  1  E8           Le834:  INX
00A835  1  60                   RTS
00A836  1               ; RUN without CLR, used by Apple DOS
00A836  1  A5 CA        run_warm:       LDA     pp
00A838  1  A4 CB                LDY     pp+1
00A83A  1  D0 5A                BNE     Le896
00A83C  1               
00A83C  1               ; token $5C - "GOSUB" statement
00A83C  1  A0 41        gosub_stmt:     LDY     #$41
00A83E  1  A5 FC                LDA     gosub_nest_count
00A840  1  C9 08                CMP     #$08
00A842  1  B0 5E                BCS     go_errmess_4
00A844  1  A8                   TAY
00A845  1  E6 FC                INC     gosub_nest_count
00A847  1  A5 E0                LDA     pverb
00A849  1  99 00 01             STA     gstk_pverbl,Y
00A84C  1  A5 E1                LDA     pverb+1
00A84E  1  99 08 01             STA     gstk_pverbh,Y
00A851  1  A5 DC                LDA     pline
00A853  1  99 10 01             STA     gstk_plinel,Y
00A856  1  A5 DD                LDA     pline+1
00A858  1  99 18 01             STA     gstk_plineh,Y
00A85B  1               
00A85B  1               ; token $24 - "THEN"
00A85B  1               ; token $5F - "GOTO" statement
00A85B  1  20 15 A7     goto_stmt:      JSR     get16bit
00A85E  1  20 6D A5             JSR     find_line
00A861  1  90 04                BCC     Le867
00A863  1  A0 37                LDY     #$37
00A865  1  D0 3B                BNE     go_errmess_4
00A867  1  A5 E4        Le867:  LDA     p2
00A869  1  A4 E5                LDY     p2+1
00A86B  1               
00A86B  1               ; loop to run a program
00A86B  1  85 DC        run_loop:       STA     pline
00A86D  1  84 DD                STY     pline+1
00A86F  1  2C 11 D0             BIT     KBDCR
00A872  1  30 4F                BMI     Le8c3
00A874  1  18                   CLC
00A875  1  69 03                ADC     #$03
00A877  1  90 01                BCC     Le87a
00A879  1  C8                   INY
00A87A  1  A2 FF        Le87a:  LDX     #$FF
00A87C  1  86 D9                STX     run_flag
00A87E  1  9A                   TXS
00A87F  1  85 E0                STA     pverb
00A881  1  84 E1                STY     pverb+1
00A883  1  20 79 A6     Le883:  JSR     execute_stmt
00A886  1  24 D9                BIT     run_flag
00A888  1  10 49                BPL     end_stmt
00A88A  1  18                   CLC
00A88B  1  A0 00                LDY     #$00
00A88D  1  A5 DC                LDA     pline
00A88F  1  71 DC                ADC     (pline),Y
00A891  1  A4 DD                LDY     pline+1
00A893  1  90 01                BCC     Le896
00A895  1  C8                   INY
00A896  1  C5 4C        Le896:  CMP     himem
00A898  1  D0 D1                BNE     run_loop
00A89A  1  C4 4D                CPY     himem+1
00A89C  1  D0 CD                BNE     run_loop
00A89E  1  A0 34                LDY     #$34
00A8A0  1  46 D9                LSR     run_flag
00A8A2  1  4C E0 A3     go_errmess_4:   JMP     print_err_msg
00A8A5  1               
00A8A5  1               ; token $5B - "RETURN" statement
00A8A5  1  A0 4A        return_stmt:    LDY     #$4A
00A8A7  1  A5 FC                LDA     gosub_nest_count
00A8A9  1  F0 F7                BEQ     go_errmess_4
00A8AB  1  C6 FC                DEC     gosub_nest_count
00A8AD  1  A8                   TAY
00A8AE  1  B9 0F 01             LDA     gstk_plinel-1,Y
00A8B1  1  85 DC                STA     pline
00A8B3  1  B9 17 01             LDA     gstk_plineh-1,Y
00A8B6  1  85 DD                STA     pline+1
00A8B8  1  BE FF 00             LDX     a:synpag+1,Y            ; force absolute addressing mode
00A8BB  1  B9 07 01             LDA     gstk_pverbh-1,Y
00A8BE  1  A8           Le8be:  TAY
00A8BF  1  8A                   TXA
00A8C0  1  4C 7A A8             JMP     Le87a
00A8C3  1  A0 63        Le8c3:  LDY     #$63
00A8C5  1  20 C4 A3             JSR     Se3c4
00A8C8  1  A0 01                LDY     #$01
00A8CA  1  B1 DC                LDA     (pline),Y
00A8CC  1  AA                   TAX
00A8CD  1  C8                   INY
00A8CE  1  B1 DC                LDA     (pline),Y
00A8D0  1  20 1B A5             JSR     prdec
00A8D3  1               
00A8D3  1               ; token $51 - "END" statement
00A8D3  1  4C B3 A2     end_stmt:       JMP     warm
00A8D6  1  C6 FB        Le8d6:  DEC     for_nest_count
00A8D8  1               
00A8D8  1               ; token $59 - "NEXT" statement
00A8D8  1               ; token $5A - "," in NEXT statement
00A8D8  1  A0 5B        next_stmt:      LDY     #$5B
00A8DA  1  A5 FB                LDA     for_nest_count
00A8DC  1  F0 C4        Le8dc:  BEQ     go_errmess_4
00A8DE  1  A8                   TAY
00A8DF  1  B5 50                LDA     noun_stk_l,X
00A8E1  1  D9 1F 01             CMP     fstk_varl-1,Y
00A8E4  1  D0 F0                BNE     Le8d6
00A8E6  1  B5 78                LDA     noun_stk_h_str,X
00A8E8  1  D9 27 01             CMP     fstk_varh-1,Y
00A8EB  1  D0 E9                BNE     Le8d6
00A8ED  1  B9 2F 01             LDA     fstk_stepl-1,Y
00A8F0  1  85 DA                STA     aux
00A8F2  1  B9 37 01             LDA     fstk_steph-1,Y
00A8F5  1  85 DB                STA     aux+1
00A8F7  1  20 15 A7             JSR     get16bit
00A8FA  1  CA                   DEX
00A8FB  1  20 93 A7             JSR     Se793
00A8FE  1  20 01 A8             JSR     var_assign
00A901  1  CA                   DEX
00A902  1  A4 FB                LDY     for_nest_count
00A904  1  B9 67 01             LDA     fstk_toh-1,Y
00A907  1  95 9F                STA     syn_stk_l+31,X
00A909  1  B9 5F 01             LDA     fstk_tol-1,Y
00A90C  1  A0 00                LDY     #$00
00A90E  1  20 08 A7             JSR     push_ya_noun_stk
00A911  1  20 82 A7             JSR     subtract
00A914  1  20 59 A7             JSR     sgn_fn
00A917  1  20 15 A7             JSR     get16bit
00A91A  1  A4 FB                LDY     for_nest_count
00A91C  1  A5 CE                LDA     acc
00A91E  1  F0 05                BEQ     Le925
00A920  1  59 37 01             EOR     fstk_steph-1,Y
00A923  1  10 12                BPL     Le937
00A925  1  B9 3F 01     Le925:  LDA     fstk_plinel-1,Y
00A928  1  85 DC                STA     pline
00A92A  1  B9 47 01             LDA     fstk_plineh-1,Y
00A92D  1  85 DD                STA     pline+1
00A92F  1  BE 4F 01             LDX     fstk_pverbl-1,Y
00A932  1  B9 57 01             LDA     fstk_pverbh-1,Y
00A935  1  D0 87                BNE     Le8be
00A937  1  C6 FB        Le937:  DEC     for_nest_count
00A939  1  60                   RTS
00A93A  1               
00A93A  1               ; token $55 - "FOR" statement
00A93A  1  A0 54        for_stmt:       LDY     #$54
00A93C  1  A5 FB                LDA     for_nest_count
00A93E  1  C9 08                CMP     #$08
00A940  1  F0 9A                BEQ     Le8dc
00A942  1  E6 FB                INC     for_nest_count
00A944  1  A8                   TAY
00A945  1  B5 50                LDA     noun_stk_l,X
00A947  1  99 20 01             STA     fstk_varl,Y
00A94A  1  B5 78                LDA     noun_stk_h_str,X
00A94C  1  99 28 01             STA     fstk_varh,Y
00A94F  1  60                   RTS
00A950  1               
00A950  1               ; token $57 - "TO"
00A950  1  20 15 A7     to_clause:      JSR     get16bit
00A953  1  A4 FB                LDY     for_nest_count
00A955  1  A5 CE                LDA     acc
00A957  1  99 5F 01             STA     fstk_tol-1,Y
00A95A  1  A5 CF                LDA     acc+1
00A95C  1  99 67 01             STA     fstk_toh-1,Y
00A95F  1  A9 01                LDA     #$01
00A961  1  99 2F 01             STA     fstk_stepl-1,Y
00A964  1  A9 00                LDA     #$00
00A966  1  99 37 01     Le966:  STA     fstk_steph-1,Y
00A969  1  A5 DC                LDA     pline
00A96B  1  99 3F 01             STA     fstk_plinel-1,Y
00A96E  1  A5 DD                LDA     pline+1
00A970  1  99 47 01             STA     fstk_plineh-1,Y
00A973  1  A5 E0                LDA     pverb
00A975  1  99 4F 01             STA     fstk_pverbl-1,Y
00A978  1  A5 E1                LDA     pverb+1
00A97A  1  99 57 01             STA     fstk_pverbh-1,Y
00A97D  1  60                   RTS
00A97E  1               
00A97E  1  20 15 A7     Te97e:  JSR     get16bit
00A981  1  A4 FB                LDY     for_nest_count
00A983  1  A5 CE                LDA     acc
00A985  1  99 2F 01             STA     fstk_stepl-1,Y
00A988  1  A5 CF                LDA     acc+1
00A98A  1  4C 66 A9             JMP     Le966
00A98D  1  00 00 00 00          .byte   $00,$00,$00,$00,$00,$00,$00,$00 ; "........"
00A991  1  00 00 00 00  
00A995  1  00 00 00             .byte   $00,$00,$00                     ; "..."
00A998  1               
00A998  1               ; verb precedence
00A998  1               ; (verb_prec[token]&0xAA)>>1 for left (?)
00A998  1               ; verb_prec[token]&0x55 for right (?)
00A998  1               verb_prec_tbl:
00A998  1  00 00 00 AB          .byte   $00,$00,$00,$AB,$03,$03,$03,$03 ; "...+...."
00A99C  1  03 03 03 03  
00A9A0  1  03 03 03 03          .byte   $03,$03,$03,$03,$03,$03,$03,$03 ; "........"
00A9A4  1  03 03 03 03  
00A9A8  1  03 03 3F 3F          .byte   $03,$03,$3F,$3F,$C0,$C0,$3C,$3C ; "..??@@<<"
00A9AC  1  C0 C0 3C 3C  
00A9B0  1  3C 3C 3C 3C          .byte   $3C,$3C,$3C,$3C,$3C,$30,$0F,$C0 ; "<<<<<0.@"
00A9B4  1  3C 30 0F C0  
00A9B8  1  CC FF 55 00          .byte   $CC,$FF,$55,$00,$AB,$AB,$03,$03 ; "L.U.++.."
00A9BC  1  AB AB 03 03  
00A9C0  1  FF FF 55 FF          .byte   $FF,$FF,$55,$FF,$FF,$55,$CF,$CF ; "..U..UOO"
00A9C4  1  FF 55 CF CF  
00A9C8  1  CF CF CF FF          .byte   $CF,$CF,$CF,$FF,$55,$C3,$C3,$C3 ; "OOO.UCCC"
00A9CC  1  55 C3 C3 C3  
00A9D0  1  55 F0 F0 CF          .byte   $55,$F0,$F0,$CF,$56,$56,$56,$55 ; "UppOVVVU"
00A9D4  1  56 56 56 55  
00A9D8  1  FF FF 55 03          .byte   $FF,$FF,$55,$03,$03,$03,$03,$03 ; "..U....."
00A9DC  1  03 03 03 03  
00A9E0  1  03 03 FF FF          .byte   $03,$03,$FF,$FF,$FF,$03,$03,$03 ; "........"
00A9E4  1  FF 03 03 03  
00A9E8  1  03 03 03 03          .byte   $03,$03,$03,$03,$03,$03,$03,$03 ; "........"
00A9EC  1  03 03 03 03  
00A9F0  1  03 03 03 03          .byte   $03,$03,$03,$03,$03,$00,$AB,$03 ; "......+."
00A9F4  1  03 00 AB 03  
00A9F8  1  57 03 03 03          .byte   $57,$03,$03,$03,$03,$07,$03,$03 ; "W......."
00A9FC  1  03 07 03 03  
00AA00  1  03 03 03 03          .byte   $03,$03,$03,$03,$03,$03,$03,$03 ; "........"
00AA04  1  03 03 03 03  
00AA08  1  03 03 AA FF          .byte   $03,$03,$AA,$FF,$FF,$FF,$FF,$FF ; "..*....."
00AA0C  1  FF FF FF FF  
00AA10  1               verb_adr_l:
00AA10  1  17 FF FF 19          .byte   $17,$FF,$FF,$19,$5D,$35,$4B,$F2 ; "....]5Kr"
00AA14  1  5D 35 4B F2  
00AA18  1  EC 87 6F AD          .byte   $EC,$87,$6F,$AD,$B7,$E2,$F8,$54 ; "l.o-7bxT"
00AA1C  1  B7 E2 F8 54  
00AA20  1  80 96 85 82          .byte   $80,$96,$85,$82,$22,$10,$33,$4A ; "....".3J"
00AA24  1  22 10 33 4A  
00AA28  1  13 06 0B 4A          .byte   $13,$06,$0B,$4A,$01,$40,$47,$7A ; "...J.@Gz"
00AA2C  1  01 40 47 7A  
00AA30  1  00 FF 23 09          .byte   $00,$FF,$23,$09,$5B,$16,$B6,$CB ; "..#.[.6K"
00AA34  1  5B 16 B6 CB  
00AA38  1  FF FF FB FF          .byte   $FF,$FF,$FB,$FF,$FF,$24,$F6,$4E ; "..{..$vN"
00AA3C  1  FF 24 F6 4E  
00AA40  1  59 50 00 FF          .byte   $59,$50,$00,$FF,$23,$A3,$6F,$36 ; "YP..##o6"
00AA44  1  23 A3 6F 36  
00AA48  1  23 D7 1C 22          .byte   $23,$D7,$1C,$22,$C2,$AE,$BA,$23 ; "#W."B.:#"
00AA4C  1  C2 AE BA 23  
00AA50  1  FF FF 21 30          .byte   $FF,$FF,$21,$30,$1E,$03,$C4,$20 ; "..!0..D "
00AA54  1  1E 03 C4 20  
00AA58  1  00 C1 FF FF          .byte   $00,$C1,$FF,$FF,$FF,$A0,$30,$1E ; ".A... 0."
00AA5C  1  FF A0 30 1E  
00AA60  1  A4 D3 B6 BC          .byte   $A4,$D3,$B6,$BC,$AA,$3A,$01,$50 ; "$S6<*:.P"
00AA64  1  AA 3A 01 50  
00AA68  1  7E D8 D8 A5          .byte   $7E,$D8,$D8,$A5,$3C,$FF,$16,$5B ; "~XX%<..["
00AA6C  1  3C FF 16 5B  
00AA70  1  28 03 C4 1D          .byte   $28,$03,$C4,$1D,$00,$0C,$4E,$00 ; "(.D...N."
00AA74  1  00 0C 4E 00  
00AA78  1  3E 00 A6 B0          .byte   $3E,$00,$A6,$B0,$00,$BC,$C6,$57 ; ">.&0.<FW"
00AA7C  1  00 BC C6 57  
00AA80  1  8C 01 27 FF          .byte   $8C,$01,$27,$FF,$FF,$FF,$FF,$FF ; "..'....."
00AA84  1  FF FF FF FF  
00AA88  1               verb_adr_h:
00AA88  1  A8 FF FF A8          .byte   $A8,$FF,$FF,$A8,$A0,$A0,$A0,$AF ; "h..h```o"
00AA8C  1  A0 A0 A0 AF  
00AA90  1  AF A3 A3 A5          .byte   $AF,$A3,$A3,$A5,$A5,$A7,$A7,$AE ; "occeeggn"
00AA94  1  A5 A7 A7 AE  
00AA98  1  AF AF A7 A7          .byte   $AF,$AF,$A7,$A7,$A2,$AF,$A7,$A7 ; "ooggbogg"
00AA9C  1  A2 AF A7 A7  
00AAA0  1  AC AC AC A7          .byte   $AC,$AC,$AC,$A7,$AC,$AC,$AC,$A2 ; "lllglllb"
00AAA4  1  AC AC AC A2  
00AAA8  1  00 FF A8 A1          .byte   $00,$FF,$A8,$A1,$A8,$A8,$AF,$AB ; "..hahhok"
00AAAC  1  A8 A8 AF AB  
00AAB0  1  FF FF A0 FF          .byte   $FF,$FF,$A0,$FF,$FF,$AF,$AE,$AF ; "..`..ono"
00AAB4  1  FF AF AE AF  
00AAB8  1  A7 A7 00 FF          .byte   $A7,$A7,$00,$FF,$A8,$A7,$A7,$A7 ; "gg..hggg"
00AABC  1  A8 A7 A7 A7  
00AAC0  1  A8 A1 A2 AE          .byte   $A8,$A1,$A2,$AE,$AE,$AE,$AE,$A8 ; "habnnnnh"
00AAC4  1  AE AE AE A8  
00AAC8  1  FF FF A1 A1          .byte   $FF,$FF,$A1,$A1,$AF,$AE,$A7,$A8 ; "..aaongh"
00AACC  1  AF AE A7 A8  
00AAD0  1  AE A7 FF FF          .byte   $AE,$A7,$FF,$FF,$FF,$AE,$A1,$AF ; "ng...nao"
00AAD4  1  FF AE A1 AF  
00AAD8  1  A7 A8 AF AF          .byte   $A7,$A8,$AF,$AF,$AB,$A9,$A8,$A9 ; "ghookihi"
00AADC  1  AB A9 A8 A9  
00AAE0  1  A9 A8 A8 A8          .byte   $A9,$A8,$A8,$A8,$A8,$FF,$A8,$A8 ; "ihhhh.hh"
00AAE4  1  A8 FF A8 A8  
00AAE8  1  A8 AE A7 A8          .byte   $A8,$AE,$A7,$A8,$AF,$AF,$AE,$AF ; "hnghoono"
00AAEC  1  AF AF AE AF  
00AAF0  1  AE AF AE AE          .byte   $AE,$AF,$AE,$AE,$AF,$AE,$AE,$AE ; "nonnonnn"
00AAF4  1  AF AE AE AE  
00AAF8  1  A1 A8 A8 FF          .byte   $A1,$A8,$A8,$FF,$FF,$FF,$FF,$FF ; "ahh....."
00AAFC  1  FF FF FF FF  
00AB00  1               
00AB00  1               ; Error message strings. Last character has high bit unset.
00AB00  1               error_msg_tbl:
00AB00  1  BE B3 B2 B7          .byte   $BE,$B3,$B2,$B7,$B6,$37         ; ">32767"
00AB04  1  B6 37        
00AB06  1  D4 CF CF A0          .byte   $D4,$CF,$CF,$A0,$CC,$CF,$CE,$47 ; "TOO LONG"
00AB0A  1  CC CF CE 47  
00AB0E  1  D3 D9 CE D4          .byte   $D3,$D9,$CE,$D4,$C1,$58         ; "SYNTAX"
00AB12  1  C1 58        
00AB14  1  CD C5 CD A0          .byte   $CD,$C5,$CD,$A0,$C6,$D5,$CC,$4C ; "MEM FULL"
00AB18  1  C6 D5 CC 4C  
00AB1C  1  D4 CF CF A0          .byte   $D4,$CF,$CF,$A0,$CD,$C1,$CE,$D9,$A0,$D0,$C1,$D2,$C5,$CE,$53 ; "TOO MANY PARENS"
00AB20  1  CD C1 CE D9  
00AB24  1  A0 D0 C1 D2  
00AB2B  1  D3 D4 D2 C9          .byte   $D3,$D4,$D2,$C9,$CE,$47         ; "STRING"
00AB2F  1  CE 47        
00AB31  1  CE CF A0 C5          .byte   $CE,$CF,$A0,$C5,$CE,$44         ; "NO END"
00AB35  1  CE 44        
00AB37  1  C2 C1 C4 A0          .byte   $C2,$C1,$C4,$A0,$C2,$D2,$C1,$CE,$C3,$48 ; "BAD BRANCH"
00AB3B  1  C2 D2 C1 CE  
00AB3F  1  C3 48        
00AB41  1  BE B8 A0 C7          .byte   $BE,$B8,$A0,$C7,$CF,$D3,$D5,$C2,$53     ; ">8 GOSUBS"
00AB45  1  CF D3 D5 C2  
00AB49  1  53           
00AB4A  1  C2 C1 C4 A0          .byte   $C2,$C1,$C4,$A0,$D2,$C5,$D4,$D5,$D2,$4E ; "BAD RETURN"
00AB4E  1  D2 C5 D4 D5  
00AB52  1  D2 4E        
00AB54  1  BE B8 A0 C6          .byte   $BE,$B8,$A0,$C6,$CF,$D2,$53     ; ">8 FORS"
00AB58  1  CF D2 53     
00AB5B  1  C2 C1 C4 A0          .byte   $C2,$C1,$C4,$A0,$CE,$C5,$D8,$54 ; "BAD NEXT"
00AB5F  1  CE C5 D8 54  
00AB63  1  D3 D4 CF D0          .byte   $D3,$D4,$CF,$D0,$D0,$C5,$C4,$A0,$C1,$D4,$20 ; "STOPPED AT "
00AB67  1  D0 C5 C4 A0  
00AB6B  1  C1 D4 20     
00AB6E  1  AA AA AA 20          .byte   $AA,$AA,$AA,$20                 ; "*** "
00AB72  1  A0 C5 D2 D2          .byte   $A0,$C5,$D2,$D2,$0D             ; " ERR.\n"
00AB76  1  0D           
00AB77  1  BE B2 B5 35          .byte   $BE,$B2,$B5,$35                 ; ">255"
00AB7B  1  D2 C1 CE C7          .byte   $D2,$C1,$CE,$C7,$45             ; RANGE"
00AB7F  1  45           
00AB80  1  C4 C9 4D             .byte   $C4,$C9,$4D                     ; "DIM"
00AB83  1  D3 D4 D2 A0          .byte   $D3,$D4,$D2,$A0,$CF,$D6,$C6,$4C ; "STR OVFL"
00AB87  1  CF D6 C6 4C  
00AB8B  1  DC 0D                .byte   $DC,$0D                         ; "\\\n"
00AB8D  1  D2 C5 D4 D9          .byte   $D2,$C5,$D4,$D9,$D0,$C5,$A0,$CC,$C9,$CE,$C5,$8D ; "RETYPE LINE\n"
00AB91  1  D0 C5 A0 CC  
00AB95  1  C9 CE C5 8D  
00AB99  1  3F                   .byte   $3F                             ; "?"
00AB9A  1  46 D9        Leb9a:  LSR     run_flag
00AB9C  1  90 03                BCC     Leba1
00AB9E  1  4C C3 A8             JMP     Le8c3
00ABA1  1  A6 CF        Leba1:  LDX     acc+1
00ABA3  1  9A                   TXS
00ABA4  1  A6 CE                LDX     acc
00ABA6  1  A0 8D                LDY     #$8D
00ABA8  1  D0 02                BNE     Lebac
00ABAA  1               
00ABAA  1               ; token $54 - "INPUT" statement, numeric, no prompt
00ABAA  1  A0 99        input_num_stmt: LDY     #$99
00ABAC  1  20 C4 A3     Lebac:  JSR     Se3c4
00ABAF  1  86 CE                STX     acc
00ABB1  1  BA                   TSX
00ABB2  1  86 CF                STX     acc+1
00ABB4  1  A0 FE                LDY     #$FE
00ABB6  1  84 D9                STY     run_flag
00ABB8  1  C8                   INY
00ABB9  1  84 C8                STY     text_index
00ABBB  1  20 99 A2             JSR     Se299
00ABBE  1  84 F1                STY     token_index
00ABC0  1  A2 20                LDX     #$20
00ABC2  1  A9 30                LDA     #$30
00ABC4  1  20 91 A4             JSR     Se491
00ABC7  1  E6 D9                INC     run_flag
00ABC9  1  A6 CE                LDX     acc
00ABCB  1               
00ABCB  1               ; token $27 - "," numeric input
00ABCB  1  A4 C8        input_num_comma:        LDY     text_index
00ABCD  1  0A                   ASL
00ABCE  1  85 CE        Lebce:  STA     acc
00ABD0  1  C8                   INY
00ABD1  1  B9 00 02             LDA     buffer,Y
00ABD4  1  C9 74                CMP     #$74
00ABD6  1  F0 D2                BEQ     input_num_stmt
00ABD8  1  49 B0                EOR     #$B0
00ABDA  1  C9 0A                CMP     #$0A
00ABDC  1  B0 F0                BCS     Lebce
00ABDE  1  C8                   INY
00ABDF  1  C8                   INY
00ABE0  1  84 C8                STY     text_index
00ABE2  1  B9 00 02             LDA     buffer,Y
00ABE5  1  48                   PHA
00ABE6  1  B9 FF 01             LDA     buffer-1,Y
00ABE9  1  A0 00                LDY     #$00
00ABEB  1  20 08 A7             JSR     push_ya_noun_stk
00ABEE  1  68                   PLA
00ABEF  1  95 A0                STA     noun_stk_h_int,X
00ABF1  1  A5 CE                LDA     acc
00ABF3  1  C9 C7                CMP     #$C7
00ABF5  1  D0 03                BNE     Lebfa
00ABF7  1  20 6F A7             JSR     negate
00ABFA  1  4C 01 A8     Lebfa:  JMP     var_assign
00ABFD  1               
00ABFD  1  FF FF FF 50          .byte   $FF,$FF,$FF,$50
00AC01  1               
00AC01  1  20 13 AC     Tec01:  JSR     Tec13
00AC04  1  D0 15                BNE     Lec1b
00AC06  1               
00AC06  1  20 0B AC     Tec06:  JSR     Tec0b
00AC09  1  D0 10                BNE     Lec1b
00AC0B  1               
00AC0B  1  20 82 A7     Tec0b:  JSR     subtract
00AC0E  1  20 6F A7             JSR     negate
00AC11  1  50 03                BVC     Lec16
00AC13  1               
00AC13  1  20 82 A7     Tec13:  JSR     subtract
00AC16  1  20 59 A7     Lec16:  JSR     sgn_fn
00AC19  1  56 50                LSR     noun_stk_l,X
00AC1B  1  4C 36 A7     Lec1b:  JMP     not_op
00AC1E  1               
00AC1E  1  FF FF                .byte   $FF,$FF
00AC20  1               
00AC20  1               ; indexes into syntabl
00AC20  1               syntabl_index:
00AC20  1  C1 FF 7F D1          .byte   $C1,$FF,$7F,$D1,$CC,$C7,$CF,$CE ; "A..QLGON"
00AC24  1  CC C7 CF CE  
00AC28  1  C5 9A 98 8B          .byte   $C5,$9A,$98,$8B,$96,$95,$93,$BF ; "E......?"
00AC2C  1  96 95 93 BF  
00AC30  1  B2 32 2D 2B          .byte   $B2,$32,$2D,$2B,$BC,$B0,$AC,$BE ; "22-+<0,>"
00AC34  1  BC B0 AC BE  
00AC38  1  35 8E 61 FF          .byte   $35,$8E,$61,$FF,$FF,$FF,$DD,$FB ; "5.a...]{"
00AC3C  1  FF FF DD FB  
00AC40  1               
00AC40  1  20 C9 AF     Tec40:  JSR     Sefc9
00AC43  1  15 4F                ORA     rnd+1,X
00AC45  1  10 05                BPL     Lec4c
00AC47  1               
00AC47  1  20 C9 AF     Tec47:  JSR     Sefc9
00AC4A  1  35 4F                AND     rnd+1,X
00AC4C  1  95 50        Lec4c:  STA     noun_stk_l,X
00AC4E  1  10 CB                BPL     Lec1b
00AC50  1  4C C9 AF             JMP     Sefc9
00AC53  1  40 60 8D 60          .byte   $40,$60,$8D,$60,$8B,$00,$7E,$8C ; "@`.`..~."
00AC57  1  8B 00 7E 8C  
00AC5B  1  33 00 00 60          .byte   $33,$00,$00,$60,$03,$BF,$12,$00 ; "3..`.?.."
00AC5F  1  03 BF 12 00  
00AC63  1  40 89 C9 47          .byte   $40,$89,$C9,$47,$9D,$17,$68,$9D ; "@.IG..h."
00AC67  1  9D 17 68 9D  
00AC6B  1  0A 00 40 60          .byte   $0A,$00,$40,$60,$8D,$60,$8B,$00 ; "..@`.`.."
00AC6F  1  8D 60 8B 00  
00AC73  1  7E 8C 3C 00          .byte   $7E,$8C,$3C,$00,$00,$60,$03,$BF ; "~.<..`.?"
00AC77  1  00 60 03 BF  
00AC7B  1  1B 4B 67 B4          .byte   $1B,$4B,$67,$B4,$A1,$07,$8C,$07 ; ".Kg4!..."
00AC7F  1  A1 07 8C 07  
00AC83  1  AE A9 AC A8          .byte   $AE,$A9,$AC,$A8,$67,$8C,$07,$B4 ; ".),(g..4"
00AC87  1  67 8C 07 B4  
00AC8B  1  AF AC B0 67          .byte   $AF,$AC,$B0,$67,$9D,$B2,$AF,$AC ; "/,0g.2/,"
00AC8F  1  9D B2 AF AC  
00AC93  1  AF A3 67 8C          .byte   $AF,$A3,$67,$8C,$07,$A5,$AB,$AF ; "/#g..%+/"
00AC97  1  07 A5 AB AF  
00AC9B  1  B0 F4 AE A9          .byte   $B0,$F4,$AE,$A9,$B2,$B0,$7F,$0E ; "0t.)20.."
00AC9F  1  B2 B0 7F 0E  
00ACA3  1  27 B4 AE A9          .byte   $27,$B4,$AE,$A9,$B2,$B0,$7F,$0E ; "'4.)20.."
00ACA7  1  B2 B0 7F 0E  
00ACAB  1  28 B4 AE A9          .byte   $28,$B4,$AE,$A9,$B2,$B0,$64,$07 ; "(4.)20d."
00ACAF  1  B2 B0 64 07  
00ACB3  1  A6 A9 67 AF          .byte   $A6,$A9,$67,$AF,$B4,$AF,$A7,$78 ; "&)g/4/'x"
00ACB7  1  B4 AF A7 78  
00ACBB  1  B4 A5 AC 78          .byte   $B4,$A5,$AC,$78,$7F,$02,$AD,$A5 ; "4%,x..-%"
00ACBF  1  7F 02 AD A5  
00ACC3  1  B2 67 A2 B5          .byte   $B2,$67,$A2,$B5,$B3,$AF,$A7,$EE ; "2g"53/'n"
00ACC7  1  B3 AF A7 EE  
00ACCB  1  B2 B5 B4 A5          .byte   $B2,$B5,$B4,$A5,$B2,$7E,$8C,$39 ; "254%2~.9"
00ACCF  1  B2 7E 8C 39  
00ACD3  1  B4 B8 A5 AE          .byte   $B4,$B8,$A5,$AE,$67,$B0,$A5,$B4 ; "48%.g0%4"
00ACD7  1  67 B0 A5 B4  
00ACDB  1  B3 27 AF B4          .byte   $B3,$27,$AF,$B4,$07,$9D,$19,$B2 ; "3'/4...2"
00ACDF  1  07 9D 19 B2  
00ACE3  1  AF A6 7F 05          .byte   $AF,$A6,$7F,$05,$37,$B4,$B5,$B0 ; "/&..7450"
00ACE7  1  37 B4 B5 B0  
00ACEB  1  AE A9 7F 05          .byte   $AE,$A9,$7F,$05,$28,$B4,$B5,$B0 ; ".)..(450"
00ACEF  1  28 B4 B5 B0  
00ACF3  1  AE A9 7F 05          .byte   $AE,$A9,$7F,$05,$2A,$B4,$B5,$B0 ; ".)..*450"
00ACF7  1  2A B4 B5 B0  
00ACFB  1  AE A9 E4 AE          .byte   $AE,$A9,$E4,$AE,$A5,$00,$FF,$FF ; ".)d.%..."
00ACFF  1  A5 00 FF FF  
00AD03  1               syntabl2:
00AD03  1  47 A2 A1 B4          .byte   $47,$A2,$A1,$B4,$7F,$0D,$30,$AD ; "G"!4..0-"
00AD07  1  7F 0D 30 AD  
00AD0B  1  A9 A4 7F 0D          .byte   $A9,$A4,$7F,$0D,$23,$AD,$A9,$A4 ; ")$..#-)$"
00AD0F  1  23 AD A9 A4  
00AD13  1  67 AC AC A1          .byte   $67,$AC,$AC,$A1,$A3,$00,$40,$80 ; "g,,!#.@."
00AD17  1  A3 00 40 80  
00AD1B  1  C0 C1 80 00          .byte   $C0,$C1,$80,$00,$47,$8C,$68,$8C ; "@A..G.h."
00AD1F  1  47 8C 68 8C  
00AD23  1  DB 67 9B 68          .byte   $DB,$67,$9B,$68,$9B,$50,$8C,$63 ; "[g.h.P.c"
00AD27  1  9B 50 8C 63  
00AD2B  1  8C 7F 01 51          .byte   $8C,$7F,$01,$51,$07,$88,$29,$84 ; "...Q..)."
00AD2F  1  07 88 29 84  
00AD33  1  80 C4 80 57          .byte   $80,$C4,$80,$57,$71,$07,$88,$14 ; ".D.Wq..."
00AD37  1  71 07 88 14  
00AD3B  1  ED A5 AD AF          .byte   $ED,$A5,$AD,$AF,$AC,$ED,$A5,$AD ; "m%-/,m%-"
00AD3F  1  AC ED A5 AD  
00AD43  1  A9 A8 F2 AF          .byte   $A9,$A8,$F2,$AF,$AC,$AF,$A3,$71 ; ")(r/,/#q"
00AD47  1  AC AF A3 71  
00AD4B  1  08 88 AE A5          .byte   $08,$88,$AE,$A5,$AC,$68,$83,$08 ; "...%,h.."
00AD4F  1  AC 68 83 08  
00AD53  1  68 9D 08 71          .byte   $68,$9D,$08,$71,$07,$88,$60,$76 ; "h..q..`v"
00AD57  1  07 88 60 76  
00AD5B  1  B4 AF AE 76          .byte   $B4,$AF,$AE,$76,$8D,$76,$8B,$51 ; "4/.v.v.Q"
00AD5F  1  8D 76 8B 51  
00AD63  1  07 88 19 B8          .byte   $07,$88,$19,$B8,$A4,$AE,$B2,$F2 ; "...8$.2r"
00AD67  1  A4 AE B2 F2  
00AD6B  1  B3 B5 F3 A2          .byte   $B3,$B5,$F3,$A2,$A1,$EE,$A7,$B3 ; "35s"!n'3"
00AD6F  1  A1 EE A7 B3  
00AD73  1  E4 AE B2 EB          .byte   $E4,$AE,$B2,$EB,$A5,$A5,$B0,$51 ; "d.2k%%0Q"
00AD77  1  A5 A5 B0 51  
00AD7B  1  07 88 39 81          .byte   $07,$88,$39,$81,$C1,$4F,$7F,$0F ; "..9.AO.."
00AD7F  1  C1 4F 7F 0F  
00AD83  1  2F 00 51 06          .byte   $2F,$00,$51,$06,$88,$29,$C2,$0C ; "/.Q..)B."
00AD87  1  88 29 C2 0C  
00AD8B  1  82 57 8C 6A          .byte   $82,$57,$8C,$6A,$8C,$42,$AE,$A5 ; ".W.j.B.%"
00AD8F  1  8C 42 AE A5  
00AD93  1  A8 B4 60 AE          .byte   $A8,$B4,$60,$AE,$A5,$A8,$B4,$4F ; "(4`.%(4O"
00AD97  1  A5 A8 B4 4F  
00AD9B  1  7E 1E 35 8C          .byte   $7E,$1E,$35,$8C,$27,$51,$07,$88 ; "~.5.'Q.."
00AD9F  1  27 51 07 88  
00ADA3  1  09 8B FE E4          .byte   $09,$8B,$FE,$E4,$AF,$AD,$F2,$AF ; "..~d/-r/"
00ADA7  1  AF AD F2 AF  
00ADAB  1  E4 AE A1 DC          .byte   $E4,$AE,$A1,$DC,$DE,$9C,$DD,$9C ; "d.!\^.]."
00ADAF  1  DE 9C DD 9C  
00ADB3  1  DE DD 9E C3          .byte   $DE,$DD,$9E,$C3,$DD,$CF,$CA,$CD ; "^].C]OJM"
00ADB7  1  DD CF CA CD  
00ADBB  1  CB 00 47 9D          .byte   $CB,$00,$47,$9D,$AD,$A5,$AD,$AF ; "K.G.-%-/"
00ADBF  1  AD A5 AD AF  
00ADC3  1  AC 76 9D AD          .byte   $AC,$76,$9D,$AD,$A5,$AD,$A9,$A8 ; ",v.-%-)("
00ADC7  1  A5 AD A9 A8  
00ADCB  1  E6 A6 AF 60          .byte   $E6,$A6,$AF,$60,$8C,$20,$AF,$B4 ; "f&/`. /4"
00ADCF  1  8C 20 AF B4  
00ADD3  1  B5 A1 F2 AC          .byte   $B5,$A1,$F2,$AC,$A3,$F2,$A3,$B3 ; "5!r,#r#3"
00ADD7  1  A3 F2 A3 B3  
00ADDB  1  60 8C 20 AC          .byte   $60,$8C,$20,$AC,$A5,$A4,$EE,$B5 ; "`. ,%$n5"
00ADDF  1  A5 A4 EE B5  
00ADE3  1  B2 60 AE B5          .byte   $B2,$60,$AE,$B5,$B2,$F4,$B3,$A9 ; "2`.52t3)"
00ADE7  1  B2 F4 B3 A9  
00ADEB  1  AC 60 8C 20          .byte   $AC,$60,$8C,$20,$B4,$B3,$A9,$AC ; ",`. 43),"
00ADEF  1  B4 B3 A9 AC  
00ADF3  1  7A 7E 9A 22          .byte   $7A,$7E,$9A,$22,$20,$00,$60,$03 ; "z~." .`."
00ADF7  1  20 00 60 03  
00ADFB  1  BF 60 03 BF          .byte   $BF,$60,$03,$BF,$1F             ; "?`.?."
00ADFF  1  1F           
00AE00  1               
00AE00  1               ; token $48 - "," string output
00AE00  1  20 B1 A7     print_str_comma:        JSR     tabout
00AE03  1               
00AE03  1               ; token $45 - ";" string output
00AE03  1               ; token $61 - "PRINT" string
00AE03  1  E8           print_str:      INX
00AE04  1  E8                   INX
00AE05  1  B5 4F                LDA     rnd+1,X
00AE07  1  85 DA                STA     aux
00AE09  1  B5 77                LDA     syn_stk_h+31,X
00AE0B  1  85 DB                STA     aux+1
00AE0D  1  B4 4E                LDY     rnd,X
00AE0F  1  98           Lee0f:  TYA
00AE10  1  D5 76                CMP     syn_stk_h+30,X
00AE12  1  B0 09                BCS     Lee1d
00AE14  1  B1 DA                LDA     (aux),Y
00AE16  1  20 C9 A3             JSR     cout
00AE19  1  C8                   INY
00AE1A  1  4C 0F AE             JMP     Lee0f
00AE1D  1  A9 FF        Lee1d:  LDA     #$FF
00AE1F  1  85 D5                STA     cr_flag
00AE21  1  60                   RTS
00AE22  1               
00AE22  1               ; token $3B - "LEN(" function
00AE22  1  E8           len_fn: INX
00AE23  1  A9 00                LDA     #$00
00AE25  1  95 78                STA     noun_stk_h_str,X
00AE27  1  95 A0                STA     noun_stk_h_int,X
00AE29  1  B5 77                LDA     syn_stk_h+31,X
00AE2B  1  38                   SEC
00AE2C  1  F5 4F                SBC     rnd+1,X
00AE2E  1  95 50                STA     noun_stk_l,X
00AE30  1  4C 23 A8             JMP     left_paren
00AE33  1               
00AE33  1  FF                   .byte   $FF
00AE34  1               
00AE34  1  20 15 A7     getbyte:        JSR     get16bit
00AE37  1  A5 CF                LDA     acc+1
00AE39  1  D0 28                BNE     gr_255_err
00AE3B  1  A5 CE                LDA     acc
00AE3D  1  60                   RTS
00AE3E  1               
00AE3E  1               ; token $68 - "," for PLOT statement (???)
00AE3E  1  20 34 AE     plot_comma:     JSR     getbyte
00AE41  1  A4 C8                LDY     text_index
00AE43  1  C9 30                CMP     #$30
00AE45  1  B0 21                BCS     range_err
00AE47  1  C0 28                CPY     #$28
00AE49  1  B0 1D                BCS     range_err
00AE4B  1  60                   RTS
00AE4C  1  EA                   NOP
00AE4D  1  EA                   NOP
00AE4E  1               
00AE4E  1  20 34 AE     Tee4e:  JSR     getbyte
00AE51  1  60                   RTS
00AE52  1  EA                   NOP
00AE53  1  8A           Tee5e:  TXA
00AE54  1  A2 01                LDX     #$01
00AE56  1  B4 CE        l123:   LDY     acc,X
00AE58  1  94 4C                STY     himem,X
00AE5A  1  B4 48                LDY     var,X
00AE5C  1  94 CA                STY     pp,X
00AE5E  1  CA                   DEX
00AE5F  1  F0 F5                BEQ     l123
00AE61  1  AA                   TAX
00AE62  1  60                   RTS
00AE63  1  A0 77        gr_255_err:     LDY     #$77            ; > 255 error
00AE65  1  4C E0 A3     go_errmess_5:   JMP     print_err_msg
00AE68  1  A0 7B        range_err:      LDY     #$7B            ; range error
00AE6A  1  D0 F9                BNE     go_errmess_5
00AE6C  1               
00AE6C  1  20 54 A2     See6c:  JSR     Se254
00AE6F  1  A5 DA                LDA     aux
00AE71  1  D0 07                BNE     Lee7a
00AE73  1  A5 DB                LDA     aux+1
00AE75  1  D0 03                BNE     Lee7a
00AE77  1  4C 7E A7             JMP     Le77e
00AE7A  1  06 CE        Lee7a:  ASL     acc
00AE7C  1  26 CF                ROL     acc+1
00AE7E  1  26 E6                ROL     p3
00AE80  1  26 E7                ROL     p3+1
00AE82  1  A5 E6                LDA     p3
00AE84  1  C5 DA                CMP     aux
00AE86  1  A5 E7                LDA     p3+1
00AE88  1  E5 DB                SBC     aux+1
00AE8A  1  90 0A                BCC     Lee96
00AE8C  1  85 E7                STA     p3+1
00AE8E  1  A5 E6                LDA     p3
00AE90  1  E5 DA                SBC     aux
00AE92  1  85 E6                STA     p3
00AE94  1  E6 CE                INC     acc
00AE96  1  88           Lee96:  DEY
00AE97  1  D0 E1                BNE     Lee7a
00AE99  1  60                   RTS
00AE9A  1               
00AE9A  1  FF FF FF FF          .byte   $FF,$FF,$FF,$FF,$FF,$FF
00AE9E  1  FF FF        
00AEA0  1               
00AEA0  1               ; token $4D - "CALL" statement
00AEA0  1  20 15 A7     call_stmt:      JSR     get16bit
00AEA3  1  6C CE 00             JMP     (acc)
00AEA6  1  A5 4C        l1233:  LDA     himem
00AEA8  1  D0 02                BNE     l1235
00AEAA  1  C6 4D                DEC     himem+1
00AEAC  1  C6 4C        l1235:  DEC     himem
00AEAE  1  A5 48                LDA     var
00AEB0  1  D0 02                BNE     l1236
00AEB2  1  C6 49                DEC     var+1
00AEB4  1  C6 48        l1236:  DEC     var
00AEB6  1  A0 00        l1237:  LDY     #$00
00AEB8  1  B1 4C                LDA     (himem),Y
00AEBA  1  91 48                STA     (var),Y
00AEBC  1  A5 CA                LDA     pp
00AEBE  1  C5 4C                CMP     himem
00AEC0  1  A5 CB                LDA     pp+1
00AEC2  1  E5 4D                SBC     himem+1
00AEC4  1  90 E0                BCC     l1233
00AEC6  1  4C 53 AE             JMP     Tee5e
00AEC9  1  C9 28                CMP     #$28
00AECB  1  B0 9B        Leecb:  BCS     range_err
00AECD  1  A8                   TAY
00AECE  1  A5 C8                LDA     text_index
00AED0  1  60                   RTS
00AED1  1  EA                   NOP
00AED2  1  EA                   NOP
00AED3  1               
00AED3  1               print_err_msg1:
00AED3  1  98                   TYA
00AED4  1  AA                   TAX
00AED5  1  A0 6E                LDY     #$6E
00AED7  1  20 C4 A3             JSR     Se3c4
00AEDA  1  8A                   TXA
00AEDB  1  A8                   TAY
00AEDC  1  20 C4 A3             JSR     Se3c4
00AEDF  1  A0 72                LDY     #$72
00AEE1  1  4C C4 A3             JMP     Se3c4
00AEE4  1               
00AEE4  1  20 15 A7     Seee4:  JSR     get16bit
00AEE7  1  06 CE        Leee7:  ASL     acc
00AEE9  1  26 CF                ROL     acc+1
00AEEB  1  30 FA                BMI     Leee7
00AEED  1  B0 DC                BCS     Leecb
00AEEF  1  D0 04                BNE     Leef5
00AEF1  1  C5 CE                CMP     acc
00AEF3  1  B0 D6                BCS     Leecb
00AEF5  1  60           Leef5:  RTS
00AEF6  1               
00AEF6  1               ; token $2E - "PEEK" fn (uses $3F left paren)
00AEF6  1  20 15 A7     peek_fn:        JSR     get16bit
00AEF9  1  B1 CE                LDA     (acc),Y
00AEFB  1  94 9F                STY     syn_stk_l+31,X
00AEFD  1  4C 08 A7             JMP     push_ya_noun_stk
00AF00  1               
00AF00  1               ; token $65 - "," for POKE statement
00AF00  1  20 34 AE     poke_stmt:      JSR     getbyte
00AF03  1  A5 CE                LDA     acc
00AF05  1  48                   PHA
00AF06  1  20 15 A7             JSR     get16bit
00AF09  1  68                   PLA
00AF0A  1  91 CE                STA     (acc),Y
00AF0C  1               
00AF0C  1  60           Tef0c:  RTS
00AF0D  1               
00AF0D  1  FF FF FF             .byte   $FF,$FF,$FF
00AF10  1               
00AF10  1               ; token $15 - "/" for numeric division
00AF10  1  20 6C AE     divide: JSR     See6c
00AF13  1  A5 CE                LDA     acc
00AF15  1  85 E6                STA     p3
00AF17  1  A5 CF                LDA     acc+1
00AF19  1  85 E7                STA     p3+1
00AF1B  1  4C 44 A2             JMP     Le244
00AF1E  1               
00AF1E  1               ; token $44 - "," next var in DIM statement is numeric
00AF1E  1               ; token $4F - "DIM", next var is numeric
00AF1E  1  20 E4 AE     dim_num:        JSR     Seee4
00AF21  1  4C 34 A1             JMP     Le134
00AF24  1               
00AF24  1               ; token $2D - "(" for numeric array subscript
00AF24  1  20 E4 AE     num_array_subs: JSR     Seee4
00AF27  1  B4 78                LDY     noun_stk_h_str,X
00AF29  1  B5 50                LDA     noun_stk_l,X
00AF2B  1  69 FE                ADC     #$FE
00AF2D  1  B0 01                BCS     Lef30
00AF2F  1  88                   DEY
00AF30  1  85 DA        Lef30:  STA     aux
00AF32  1  84 DB                STY     aux+1
00AF34  1  18                   CLC
00AF35  1  65 CE                ADC     acc
00AF37  1  95 50                STA     noun_stk_l,X
00AF39  1  98                   TYA
00AF3A  1  65 CF                ADC     acc+1
00AF3C  1  95 78                STA     noun_stk_h_str,X
00AF3E  1  A0 00                LDY     #$00
00AF40  1  B5 50                LDA     noun_stk_l,X
00AF42  1  D1 DA                CMP     (aux),Y
00AF44  1  C8                   INY
00AF45  1  B5 78                LDA     noun_stk_h_str,X
00AF47  1  F1 DA                SBC     (aux),Y
00AF49  1  B0 80                BCS     Leecb
00AF4B  1  4C 23 A8             JMP     left_paren
00AF4E  1               
00AF4E  1               ; token $2F - "RND" fn (uses $3F left paren)
00AF4E  1  20 15 A7     rnd_fn: JSR     get16bit
00AF51  1  A5 4E                LDA     rnd
00AF53  1  20 08 A7             JSR     push_ya_noun_stk
00AF56  1  A5 4F                LDA     rnd+1
00AF58  1  D0 04                BNE     Lef5e
00AF5A  1  C5 4E                CMP     rnd
00AF5C  1  69 00                ADC     #$00
00AF5E  1  29 7F        Lef5e:  AND     #$7F
00AF60  1  85 4F                STA     rnd+1
00AF62  1  95 A0                STA     noun_stk_h_int,X
00AF64  1  A0 11                LDY     #$11
00AF66  1  A5 4F        Lef66:  LDA     rnd+1
00AF68  1  0A                   ASL
00AF69  1  18                   CLC
00AF6A  1  69 40                ADC     #$40
00AF6C  1  0A                   ASL
00AF6D  1  26 4E                ROL     rnd
00AF6F  1  26 4F                ROL     rnd+1
00AF71  1  88                   DEY
00AF72  1  D0 F2                BNE     Lef66
00AF74  1  A5 CE                LDA     acc
00AF76  1  20 08 A7             JSR     push_ya_noun_stk
00AF79  1  A5 CF                LDA     acc+1
00AF7B  1  95 A0                STA     noun_stk_h_int,X
00AF7D  1  4C 7A A2             JMP     mod_op
00AF80  1               
00AF80  1  20 15 A7     Tef80:  JSR     get16bit
00AF83  1  A4 CE                LDY     acc
00AF85  1  C4 4C                CPY     himem
00AF87  1  A5 CF                LDA     acc+1
00AF89  1  E5 4D                SBC     himem+1
00AF8B  1  90 1F                BCC     Lefab
00AF8D  1  84 48                STY     var
00AF8F  1  A5 CF                LDA     acc+1
00AF91  1  85 49                STA     var+1
00AF93  1  4C B6 AE     Lef93:  JMP     l1237
00AF96  1               
00AF96  1  20 15 A7     Tef96:  JSR     get16bit
00AF99  1  A4 CE                LDY     acc
00AF9B  1  C4 CA                CPY     pp
00AF9D  1  A5 CF                LDA     acc+1
00AF9F  1  E5 CB                SBC     pp+1
00AFA1  1  B0 09                BCS     Lefab
00AFA3  1  84 4A                STY     lomem
00AFA5  1  A5 CF                LDA     acc+1
00AFA7  1  85 4B                STA     lomem+1
00AFA9  1  4C B7 A5             JMP     clr
00AFAC  1  4C CB AE     Lefab:  JMP     Leecb
00AFAF  1  EA                   NOP
00AFB0  1  EA                   NOP
00AFB1  1  EA                   NOP
00AFB2  1  EA                   NOP
00AFB3  1  20 C9 AF     Lefb3:  JSR     Sefc9
00AFB6  1               
00AFB6  1               ; token $26 - "," for string input
00AFB6  1               ; token $52 - "INPUT" statement for string
00AFB6  1  20 71 A1     string_input:   JSR     input_str
00AFB9  1  4C BF AF             JMP     Lefbf
00AFBC  1               
00AFBC  1               ; token $53 - "INPUT" with literal string prompt
00AFBC  1  20 03 AE     input_prompt:   JSR     print_str
00AFBF  1  A9 FF        Lefbf:  LDA     #$FF
00AFC1  1  85 C8                STA     text_index
00AFC3  1  A9 74                LDA     #$74
00AFC5  1  8D 00 02             STA     buffer
00AFC8  1  60                   RTS
00AFC9  1               
00AFC9  1  20 36 A7     Sefc9:  JSR     not_op
00AFCC  1  E8                   INX
00AFCD  1               
00AFCD  1  20 36 A7     Sefcd:  JSR     not_op
00AFD0  1  B5 50                LDA     noun_stk_l,X
00AFD2  1  60                   RTS
00AFD3  1               
00AFD3  1               ; memory initialization for 4K RAM
00AFD3  1  A9 00        mem_init_4k:    LDA     #$00
00AFD5  1  85 4A                STA     lomem
00AFD7  1  85 4C                STA     himem
00AFD9  1  A9 08                LDA     #$08
00AFDB  1  85 4B                STA     lomem+1         ; LOMEM defaults to $0800
00AFDD  1  A9 10                LDA     #$10
00AFDF  1  85 4D                STA     himem+1         ; HIMEM defaults to $1000
00AFE1  1  4C AD A5             JMP     new_cmd
00AFE4  1               
00AFE4  1  D5 78        Sefe4:  CMP     noun_stk_h_str,X
00AFE6  1  D0 01                BNE     Lefe9
00AFE8  1  18                   CLC
00AFE9  1  4C 02 A1     Lefe9:  JMP     Le102
00AFEC  1               
00AFEC  1  20 B7 A5     Tefec:  JSR     clr
00AFEF  1  4C 36 A8             JMP     run_warm
00AFF2  1               
00AFF2  1  20 B7 A5     Teff2:  JSR     clr
00AFF5  1  4C 5B A8             JMP     goto_stmt
00AFF8  1               
00AFF8  1  E0 80        Seff8:  CPX     #$80
00AFFA  1  D0 01                BNE     Leffd
00AFFC  1  88                   DEY
00AFFD  1  4C 0C A0     Leffd:  JMP     Se00c
00AFFD  1               
