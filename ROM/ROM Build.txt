This repository contains the information and source (or object) code necessary to build the PAL-1 ROM.

Directories 0.1 through 0.4 are related to the contents for the lower half of the 32K EPROM. This portion of the content can be created by simply assembling the boot loader code. The binary images for other programs along with the assembly of eWoz are included to allow you to "build from scratch" if you wanted to.

The output will be a hex file addressed at $A000. You can reclocate this down using srec_cat or it can be moved using the software included with some EPROM programmers.

DIRECTORY 0.1 contains the source and object for the ROM Bootloader. This can be assembled using 64TASS (see comments). For BASIC and FORTH, the .byte data comes from object code found in other directories labeled "0.x". This code is released under the Apache License.

DIRECTORY 0.2 has the MS BASIC binary file. This was converted to the .byte statements using the srec_cat tool along with some manual edits. The bootloader copies this to $2000 and jumps to $4065 to start execution.

DIRECTORY 0.3 has the FIG FORTH source that can be assembled using 64TASS. The .hex file was converted to .byte statements using the srec_cat tool along with some manual edits. The bootloader copies this to $2300 and jumps to $2300 to start execution.

DIRECTORY 0.4 has the code for a memory test program written by Jim butterfield and appearing in the August 1977 issue of Dr. Dobb's Journal as well as The First Book of KIM. The source can be assembled using 64TASS. The .hex file was converted to .byte statements using the srec_cat tool along with some manual edits. The bootloader copies this to Page Zero and configures the PAL-1's monitor to point to the start address before jumping to the monitor.

Directories 1.1 through 1.5 contain the code for the upper 16K block of the EPROM. The only oddity here is that some of the patch code for A1B (in Directory 1.3) overwrites address where there is already data. This can be handled using the -contradictor-bytes flag in srec_cat or the software used by some EPROM programmers.

For the most part, you can take the .hex files generated by each section and concatenate them in a text file. You will then need to relocate them from $A000 to the appropriate location in the EPROM using a tool like srec_cat or the software that comes with some EPROM programmers.

DIRECTORY 1.1 has the code to build a relocated version of Apple 1 Integer BASIC (A1B). Orignally, A1B was located at $E000 on the Apple 1. It has been relocated to $A000 here. This involves changing jumps, tables, and some refrences to where tables set in memory. These changes were made using a Python tool that can be found in the A1B area of the W4JBM GitHub repository. (They can also be made manually, but it can take some time to figure out what needs to change.) The object code created is not patched in any way and should run properly if you were to load it into an Apple 1 clone. The patches are part of another file we will talk about later.

DIRECTORY 1.2 has code for building a version of eWoz that runs from $B000. This is slightly modified from the eWoz in the other ROM bank but operation is similar. Here it was created to begin at a certain address instead of just "landing where it may" which happens with the other version.

DIRECTORY 1.3 has patch code for the A1B ROM object code as well as enhanced input, output, and initialization routines for A1B. The patches mainly place jump instruction in the A1B code to jump to the enhanced routines. One key feature of the patch code is better handling of terminal input and output.

DIRECTORY 1.4 has the code to build PBUG, but it is currently in very, very rough shape and needs to be cleaned up. Basically it is a highly tailored version of JMON from Jeff Tranter. From the Linux command line you can type "make jmon.bin" to build the binary file. This is designed to reside at $B400 and something like srec_cat can be used to generate the .hex file with the appropriate address. This is used and released under the Apache License. See the source for copies of the license and also a copy of the original source code.

DIRECTORY 1.5 has the code to build VTL-02. It does include some patch code to better handle terminal input and output.

If you create the contents of Bank 0 and move the address from $A000 down to $0000 and then create the contents of Bank 1 and move the address from $A000 down to $4000, you should end up with a hex file that any EPROM programmer can accept and burn a 27C256.



Copyright (c) 2021, Jim McClanahan W4JBM

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
