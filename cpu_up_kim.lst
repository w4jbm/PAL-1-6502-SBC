
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --intel-hex -o cpu_up_kim.hex -m --verbose-list -L cpu_up_kim.lst cpu_up_kim.a65
; Sat Feb 20 13:44:16 2021

;Offset	;Hex		;Source

;******  Processing input file: cpu_up_kim.a65

			; This program sets the PAL/KIM's LEDs to display the message, "CPU UP"
			; similar to the message from the Heathkit 6800 trainer. It just always
			; struck me as kind of cool...
			;
			; By Jim McClanahan, W4JBM, Feb 2021
			;
			; This is not optimized at all. Some things could be moved into the
			; delay subroutine to reduce the size. This is total brute force and
			; direct writes to the control registers.
			;
			; Build with:
			; $ 64tass --intel-hex cpu_up_kim.a65 -o cpu_up_kim.hex -m --verbose-list -L cpu_up_kim.lst
			; $ srec_cat cpu_up_kim.hex -intel -o cpu_up_kim.mos -MOS_Technologies
			; $ unix2dos cpu_up_kim.mos
			; $ cp cpu_up_kim.mos ~
			;
			; The addresses of the 6530/6532 used to control the LED display:
			;

=$1740			SAD	= $1740		; A side Data
=$1741			PADD	= $1741		; A side Data Direction
=$1742			SBD	= $1742		; B side Data
=$1743			PBDD	= $1743		; B side Data Direction

			; Note: For Data Direction, 0 is input and 1 is output.

=$7f			A_INIT	= $7F		; (PA6 - PA0 are outputs)
=$1e			B_INIT	= $1E		; (PA4 - PA1 are outputs)

			;
			; PAL/KIM 6502 LED Segment Layout
			;
			; A  ---
			; F |   | B
			; G  ---
			; E |   | C
			; D  ---
			;
			; PA0  (1) = A
			; PA1  (2) = B
			; PA2  (4) = C
			; PA3  (8) = D
			; PA4 (16) = E
			; PA5 (32) = F
			; PA6 (64) = G
			;
			; CPU_ UP would translate into:
			;
			; C = A+D+E+F = 1+8+16+32      = 57
			; P = A+B+E+F+G = 1+2+16+32+64 = 115
			; U = B+C+D+E+F = 2+4+8+16+32  = 62
			; _ (blank)                    = 0
			;
			; U = B+C+D+E+F = 2+4+8+16+32  = 62
			; P = A+B+E+F+G = 1+2+16+32+64 = 115
			;

=57			C	= 57
=115			P	= 115
=62			U	= 62
=0			BLNK	= 0


			;
			; Position Selection is done with PB1 through PB4 feeding a 1-of-10
			; decoder. Then output 4, 5, 6, 7, 8, and 9 are used. It isn't that
			; hard to build a truth table for this, but the values are also
			; well documented.
			;

=$08			LED1	= $08
=$0a			LED2	= $0A
=$0c			LED3	= $0C
=$0e			LED4	= $0E

=$10			LED5	= $10
=$12			LED6	= $12

=$00			LEDOFF	= $00

			;
			;        DECODER    PORT B
			; POS  OUT  D C B A  INP
			;  1    4   0 1 0 0  $08
			;  2    5   0 1 0 1  $0A
			;  3    6   0 1 1 0  $0C
			;  4    7   0 1 1 1  $0E
			;
			;  5    8   1 0 0 0  $10
			;  6    9   1 0 0 1  $12
			;
			; Note: Because the decoder is feed starting with PB1 instead of PB2
			;       we have to add an extra zero to the end of our calculation
			;       (effectively doubling the value).
			;

			; Location isn't particularly important...

			*	= $0200


.0200	a9 7f		START:	LDA #A_INIT	; Set the data direction bits
.0202	8d 41 17		STA PADD
.0205	a9 1e			LDA #B_INIT
.0207	8d 43 17		STA PBDD

			; Display "CPU_"

.020a	a9 39		DSPLY:	LDA #C		; Load the pattern for the
.020c	8d 40 17		STA SAD	;   seven segments...
.020f	a9 08			LDA #LED1	; Load the pointer to the
.0211	8d 42 17		STA SBD	;   right position..
.0214	20 79 02		JSR DELAY	; Pause a bit
.0217	a9 00			LDA #LEDOFF	; Blank things before going
.0219	8d 42 17		STA SBD	;   to the next one

.021c	a9 73			LDA #P
.021e	8d 40 17		STA SAD
.0221	a9 0a			LDA #LED2
.0223	8d 42 17		STA SBD
.0226	20 79 02		JSR DELAY
.0229	a9 00			LDA #LEDOFF
.022b	8d 42 17		STA SBD

.022e	a9 3e			LDA #U
.0230	8d 40 17		STA SAD
.0233	a9 0c			LDA #LED3
.0235	8d 42 17		STA SBD
.0238	20 79 02		JSR DELAY
.023b	a9 00			LDA #LEDOFF
.023d	8d 42 17		STA SBD

.0240	a9 00			LDA #BLNK
.0242	8d 40 17		STA SAD
.0245	a9 0e			LDA #LED4
.0247	8d 42 17		STA SBD
.024a	20 79 02		JSR DELAY
.024d	a9 00			LDA #LEDOFF
.024f	8d 42 17		STA SBD

			; Display "UP"

.0252	a9 3e			LDA #U
.0254	8d 40 17		STA SAD
.0257	a9 10			LDA #LED5
.0259	8d 42 17		STA SBD
.025c	20 79 02		JSR DELAY
.025f	a9 00			LDA #LEDOFF
.0261	8d 42 17		STA SBD

.0264	a9 73			LDA #P
.0266	8d 40 17		STA SAD
.0269	a9 12			LDA #LED6
.026b	8d 42 17		STA SBD
.026e	20 79 02		JSR DELAY
.0271	a9 00			LDA #LEDOFF
.0273	8d 42 17		STA SBD

.0276	4c 0a 02	FINSH:	JMP DSPLY	; Now do it again...

.0279	a0 02		DELAY:	LDY #2		; Just a simple delay routine
.027b	a2 ff			LDX #255
.027d	ca		DLOOP:	DEX
.027e	d0 fd			BNE DLOOP
.0280	88			DEY
.0281	d0 fa			BNE DLOOP
.0283	60			RTS

			.END

;******  End of listing
