; This program makes use of the PAL-1 RIOT Gadget which offers an
; 8x16 LED display.
;
; By Jim McClanahan, W4JBM, Feb 2021
; For the PAL-1 by Liu Ganning (availble on Tindie)
;
; Rev 2 - Add CLD so that it runs no matter which way you load
;         it or which monitor you are using. (Error encountered
;         by Will Senn.) (June 2021)
;
; This is not optimized at all. This is totally brute force with the
; original goal to be something that could run from ROM without use
; of any RAM beyon the Stack (for subroutine calls). Macros and a
; decent editor made it easy to create something that meets that goal
; but is much, much larger than it needs to be.
;
; I may do something in the future to reduce the size, but for now
; it does what I wanted.
;
; Build with:
; $ 64tass --intel-hex starship.a65 -o starship.hex -m --verbose-list -L starship.lst
; $ srec_cat starship.hex -intel -o starship.mos -MOS_Technologies
; $ unix2dos starship.mos
; $ cp starship.mos ~
;
; The addresses of the second 6530/6532 ROIT which is on an expansion
; card on the PAL-1:
;

SAD	= $1700		; A side Data (5888 decimal)
PADD	= $1701		; A side Data Direction (5889 decimal)

; Note: For Data Direction, 0 is input and 1 is output.

A_INIT	= $FF		; (PA7 - PA0 are outputs)

;
; Pins used for the interface to the MAX7219:
;
; PA1 - Data In
; PA2 - LOAD
; PA3 - Clock
;
; How it works:
;
; There are a pair of MAX7219's. Each command is 16 bit
; in length. That means that we will need to "clock in"
; 32 bits of data (16 for each of the MAX7219s). The
; data we send will cascade from the first into the
; second as we clock things. (This means we must send
; the right side first, and then the left side. Also,
; the bits we push have the high-order bit on the bottom
; of a vertical row of LEDs. It is easy to get things
; turned around because of all of this...)
;
; To begin the process, we first set PA2 high ($04) to
; tell the MAX7219 that that we are about to send a
; sequence of bits. We then send the data: $02 for a
; one and $00 for a zero. We then toggle the clock
; by sending $0A for a one or $08 for a zero.
;
; We continue that two byte sequence ($02 then $0A for
; a one or $00 then $08 for a zero) until we have
; clocked all 32 bits (two 16 bit words).
;
; Then we set PA2 high ($04) once again to indicate that
; data has been loaded.
;
; We can load only the first or the second of the
; MAX7219s by sending all zeros to the one we do
; not wish to change (the MAX7219 sees a no-op when
; D11 through D8 are all zero).
;

;
; This macro allows us to push in two vertical lines
; of data in the form LINES <Vertical Row Right>,
; <Bitmap>,<Vertical Row Left>,<Bitmap>.

LINES	.macro
	LDA #\1
	JSR SNDBYT
	LDA #\2
	JSR SNDBYT
	LDA #\3
	JSR SNDBYT
	LDA #\4
	JSR SNDBYT
	JSR TGLOAD
	.endm

; Because of size, must be located up in the expansion
; RAM area...

*	= $2000


START:	CLD		; Clear Decimal Mode Flag
	LDA #A_INIT	; Set the data direction bits
	STA PADD

;
; The following is the template for most of the rest
; of the program. We:
;
; 1. Toggle the LOAD bit high
; 2. Send 4 Bytes of data with them starting from
;    D15 on the right thru D0 on the right and then
;    D15 on the left thru D0 on the left.
; 3. Finally we toggle the LOAD bit again and
;    the MAX7219s should load the data we just sent
;

; Set the Scan Limit to 7 (which displays all 8 bytes)

INIT:	JSR TGLOAD
	LDA #%11111011	; Scan Limit Register ($xB)
	JSR SNDBYT
	LDA #%11111111	; And Scan Limit Value ($x7)
	JSR SNDBYT
	LDA #%11111011
	JSR SNDBYT
	LDA #%11111111
	JSR SNDBYT
	JSR TGLOAD

; Set "decode" to $00 since we are not driving seven
; segment displays

	LDA #%11111001
	JSR SNDBYT
	LDA #%00000000
	JSR SNDBYT
	LDA #%11111001
	JSR SNDBYT
	LDA #%00000000
	JSR SNDBYT
	JSR TGLOAD

; Set Shutdown Mode register to Normal Operation

	LDA #%11111100
	JSR SNDBYT
	LDA #%00000001
	JSR SNDBYT
	LDA #%11111100
	JSR SNDBYT
	LDA #%00000001
	JSR SNDBYT
	JSR TGLOAD

; Set Display Test register to Normal Operation

	LDA #%11111111
	JSR SNDBYT
	LDA #%11111110
	JSR SNDBYT
	LDA #%11111111
	JSR SNDBYT
	LDA #%11111110
	JSR SNDBYT
	JSR TGLOAD

; Set Intensity Register to 17/32

	LDA #%11111010
	JSR SNDBYT
	LDA #%00001000
	JSR SNDBYT
	LDA #%11111010
	JSR SNDBYT
	LDA #%00001000
	JSR SNDBYT
	JSR TGLOAD

;
; The LED Matrix is now set up, and ready for use.
;
; The following blocks are "frames" of animation that
; move the starship across the LEDs from right to
; left.
;

FRM01:	.LINES V1,SS09,V1,SS01
	.LINES V2,SS10,V2,SS02
	.LINES V3,SS11,V3,SS03
	.LINES V4,SS12,V4,SS04
	.LINES V5,SS13,V5,SS05
	.LINES V6,SS14,V6,SS06
	.LINES V7,SS15,V7,SS07
	.LINES V8,SS16,V8,SS08
	JSR DELAY

FRM02:	.LINES V1,SS10,V1,SS02
	.LINES V2,SS11,V2,SS03
	.LINES V3,SS12,V3,SS04
	.LINES V4,SS13,V4,SS05
	.LINES V5,SS14,V5,SS06
	.LINES V6,SS15,V6,SS07
	.LINES V7,SS16,V7,SS08
	.LINES V8,BLNK,V8,SS09
	JSR DELAY

FRM03:	.LINES V1,SS11,V1,SS03
	.LINES V2,SS12,V2,SS04
	.LINES V3,SS13,V3,SS05
	.LINES V4,SS14,V4,SS06
	.LINES V5,SS15,V5,SS07
	.LINES V6,SS16,V6,SS08
	.LINES V7,BLNK,V7,SS09
	.LINES V8,BLNK,V8,SS10
	JSR DELAY

FRM04:	.LINES V1,SS12,V1,SS04
	.LINES V2,SS13,V2,SS05
	.LINES V3,SS14,V3,SS06
	.LINES V4,SS15,V4,SS07
	.LINES V5,SS16,V5,SS08
	.LINES V6,BLNK,V6,SS09
	.LINES V7,BLNK,V7,SS10
	.LINES V8,BLNK,V8,SS11
	JSR DELAY

FRM05:	.LINES V1,SS13,V1,SS05
	.LINES V2,SS14,V2,SS06
	.LINES V3,SS15,V3,SS07
	.LINES V4,SS16,V4,SS08
	.LINES V5,BLNK,V5,SS09
	.LINES V6,BLNK,V6,SS10
	.LINES V7,BLNK,V7,SS11
	.LINES V8,BLNK,V8,SS12
	JSR DELAY

FRM06:	.LINES V1,SS14,V1,SS06
	.LINES V2,SS15,V2,SS07
	.LINES V3,SS16,V3,SS08
	.LINES V4,BLNK,V4,SS09
	.LINES V5,BLNK,V5,SS10
	.LINES V6,BLNK,V6,SS11
	.LINES V7,BLNK,V7,SS12
	.LINES V8,BLNK,V8,SS13
	JSR DELAY

FRM07:	.LINES V1,SS15,V1,SS07
	.LINES V2,SS16,V2,SS08
	.LINES V3,BLNK,V3,SS09
	.LINES V4,BLNK,V4,SS10
	.LINES V5,BLNK,V5,SS11
	.LINES V6,BLNK,V6,SS12
	.LINES V7,BLNK,V7,SS13
	.LINES V8,BLNK,V8,SS14
	JSR DELAY

FRM08:	.LINES V1,SS16,V1,SS08
	.LINES V2,BLNK,V2,SS09
	.LINES V3,BLNK,V3,SS10
	.LINES V4,BLNK,V4,SS11
	.LINES V5,BLNK,V5,SS12
	.LINES V6,BLNK,V6,SS13
	.LINES V7,BLNK,V7,SS14
	.LINES V8,BLNK,V8,SS15
	JSR DELAY

FRM09:	.LINES V1,BLNK,V1,SS09
	.LINES V2,BLNK,V2,SS10
	.LINES V3,BLNK,V3,SS11
	.LINES V4,BLNK,V4,SS12
	.LINES V5,BLNK,V5,SS13
	.LINES V6,BLNK,V6,SS14
	.LINES V7,BLNK,V7,SS15
	.LINES V8,BLNK,V8,SS16
	JSR DELAY

FRM10:	.LINES V1,BLNK,V1,SS10
	.LINES V2,BLNK,V2,SS11
	.LINES V3,BLNK,V3,SS12
	.LINES V4,BLNK,V4,SS13
	.LINES V5,BLNK,V5,SS14
	.LINES V6,BLNK,V6,SS15
	.LINES V7,BLNK,V7,SS16
	.LINES V8,SS01,V8,BLNK
	JSR DELAY

FRM11:	.LINES V1,BLNK,V1,SS11
	.LINES V2,BLNK,V2,SS12
	.LINES V3,BLNK,V3,SS13
	.LINES V4,BLNK,V4,SS14
	.LINES V5,BLNK,V5,SS15
	.LINES V6,BLNK,V6,SS16
	.LINES V7,SS01,V7,BLNK
	.LINES V8,SS02,V8,BLNK
	JSR DELAY

FRM12:	.LINES V1,BLNK,V1,SS12
	.LINES V2,BLNK,V2,SS13
	.LINES V3,BLNK,V3,SS14
	.LINES V4,BLNK,V4,SS15
	.LINES V5,BLNK,V5,SS16
	.LINES V6,SS01,V6,BLNK
	.LINES V7,SS02,V7,BLNK
	.LINES V8,SS03,V8,BLNK
	JSR DELAY

FRM13:	.LINES V1,BLNK,V1,SS13
	.LINES V2,BLNK,V2,SS14
	.LINES V3,BLNK,V3,SS15
	.LINES V4,BLNK,V4,SS16
	.LINES V5,SS01,V5,BLNK
	.LINES V6,SS02,V6,BLNK
	.LINES V7,SS03,V7,BLNK
	.LINES V8,SS04,V8,BLNK
	JSR DELAY

FRM14:	.LINES V1,BLNK,V1,SS14
	.LINES V2,BLNK,V2,SS15
	.LINES V3,BLNK,V3,SS16
	.LINES V4,SS01,V4,BLNK
	.LINES V5,SS02,V5,BLNK
	.LINES V6,SS03,V6,BLNK
	.LINES V7,SS04,V7,BLNK
	.LINES V8,SS05,V8,BLNK
	JSR DELAY

FRM15:	.LINES V1,BLNK,V1,SS15
	.LINES V2,BLNK,V2,SS16
	.LINES V3,SS01,V3,BLNK
	.LINES V4,SS02,V4,BLNK
	.LINES V5,SS03,V5,BLNK
	.LINES V6,SS04,V6,BLNK
	.LINES V7,SS05,V7,BLNK
	.LINES V8,SS06,V8,BLNK
	JSR DELAY

FRM16:	.LINES V1,BLNK,V1,SS16
	.LINES V2,SS01,V2,BLNK
	.LINES V3,SS02,V3,BLNK
	.LINES V4,SS03,V4,BLNK
	.LINES V5,SS04,V5,BLNK
	.LINES V6,SS05,V6,BLNK
	.LINES V7,SS06,V7,BLNK
	.LINES V8,SS07,V8,BLNK
	JSR DELAY

FRM17:	.LINES V1,SS01,V1,BLNK
	.LINES V2,SS02,V2,BLNK
	.LINES V3,SS03,V3,BLNK
	.LINES V4,SS04,V4,BLNK
	.LINES V5,SS05,V5,BLNK
	.LINES V6,SS06,V6,BLNK
	.LINES V7,SS07,V7,BLNK
	.LINES V8,SS08,V8,BLNK
	JSR DELAY

FRM18:	.LINES V1,SS02,V1,BLNK
	.LINES V2,SS03,V2,BLNK
	.LINES V3,SS04,V3,BLNK
	.LINES V4,SS05,V4,BLNK
	.LINES V5,SS06,V5,BLNK
	.LINES V6,SS07,V6,BLNK
	.LINES V7,SS08,V7,BLNK
	.LINES V8,SS09,V8,SS01
	JSR DELAY

FRM19:	.LINES V1,SS03,V1,BLNK
	.LINES V2,SS04,V2,BLNK
	.LINES V3,SS05,V3,BLNK
	.LINES V4,SS06,V4,BLNK
	.LINES V5,SS07,V5,BLNK
	.LINES V6,SS08,V6,BLNK
	.LINES V7,SS09,V7,SS01
	.LINES V8,SS10,V8,SS02
	JSR DELAY

FRM20:	.LINES V1,SS04,V1,BLNK
	.LINES V2,SS05,V2,BLNK
	.LINES V3,SS06,V3,BLNK
	.LINES V4,SS07,V4,BLNK
	.LINES V5,SS08,V5,BLNK
	.LINES V6,SS09,V6,SS01
	.LINES V7,SS10,V7,SS02
	.LINES V8,SS11,V8,SS03
	JSR DELAY

FRM21:	.LINES V1,SS05,V1,BLNK
	.LINES V2,SS06,V2,BLNK
	.LINES V3,SS07,V3,BLNK
	.LINES V4,SS08,V4,BLNK
	.LINES V5,SS09,V5,SS01
	.LINES V6,SS10,V6,SS02
	.LINES V7,SS11,V7,SS03
	.LINES V8,SS12,V8,SS04
	JSR DELAY

FRM22:	.LINES V1,SS06,V1,BLNK
	.LINES V2,SS07,V2,BLNK
	.LINES V3,SS08,V3,BLNK
	.LINES V4,SS09,V4,SS01
	.LINES V5,SS10,V5,SS02
	.LINES V6,SS11,V6,SS03
	.LINES V7,SS12,V7,SS04
	.LINES V8,SS13,V8,SS05
	JSR DELAY

FRM23:	.LINES V1,SS07,V1,BLNK
	.LINES V2,SS08,V2,BLNK
	.LINES V3,SS09,V3,SS01
	.LINES V4,SS10,V4,SS02
	.LINES V5,SS11,V5,SS03
	.LINES V6,SS12,V6,SS04
	.LINES V7,SS13,V7,SS05
	.LINES V8,SS14,V8,SS06
	JSR DELAY


FRM24:	.LINES V1,SS08,V1,BLNK
	.LINES V2,SS09,V2,SS01
	.LINES V3,SS10,V3,SS02
	.LINES V4,SS11,V4,SS03
	.LINES V5,SS12,V5,SS04
	.LINES V6,SS13,V6,SS05
	.LINES V7,SS14,V7,SS06
	.LINES V8,SS15,V8,SS07
	JSR DELAY

FINSH:	JMP FRM01	; Now do it again...


; SNDBYT - Send a byte into the MAX7219
;
; You should assume all registers have been altered
; upon return.
;
; Note: This is very much a "brute force" routine
; that avoids using any Page Zero or other memory
; locations. This entire program should work from
; ROM if desired.
;
; There are better ways to do this if you don't mind
; using some RAM somewhere. Being able to put this
; code in ROM was a deliberate choice.
;
; Note: When sending the first byte after having
; called TGLOAD, the sending of the first bit also
; toggles the LOAD line to Zero.
;

SNDBYT:	JSR SNDBIT	; Send Bit 7
	JSR SNDBIT	; Send Bit 6
	JSR SNDBIT	; Send Bit 5
	JSR SNDBIT	; Send Bit 4
	JSR SNDBIT	; Send Bit 3
	JSR SNDBIT	; Send Bit 2
	JSR SNDBIT	; Send Bit 1
	JSR SNDBIT	; Send Bit 0
	RTS

; This is the routine that does the work of sending
; whatever is in Bit 7 of the Accumulator (and shifts
; the contents to the left to get ready for the next
; call).

SNDBIT:	LDX #0
	ROL A		; Put high bit in Carry
	TAY		; Story A into Y
	BCC SNDIT	
	LDX #2
SNDIT:	STX SAD
	TXA
	ORA #$08	; Set the clock by
	STA SAD
	TYA		; Pull A back from Y
	RTS


; TGLOAD - Toggle the LOAD Line
;
; This is used to indicate the start and end of
; transfering bits into the MAX7219s.
;
; Note: When used to mark the end of a transfer,
; this routine also effectively does the final
; clock transition to zero.
;

TGLOAD:	LDA #04		; Toggle the LOAD line
	STA SAD
	LDA #00
	STA SAD
	RTS


; DELAY - A simple delay routine...
;
; Things run REALLY fast because we sacrificed memory
; with a large program and don't have any complexities
; around creating the individual frames.
;
; This counts to 16 x 255 or 4,080 in a simple loop.

DELAY:	LDY #16		; Just a simple delay routine
	LDX #255
DLOOP:	DEX
	BNE DLOOP
	DEY
	BNE DLOOP
	RTS

;
; Starship Defines based on the graphics characters
; used on the Ohio Scientific C1P!
;
; Each definition is a single, eight-bit vertical
; line. Highest Bit represent "top" and Lowest Bit
; represents "bottom" of character.
;

SS01	= %00001000
SS02	= %00001000
SS03	= %00001000
SS04	= %01101100
SS05	= %01101100
SS06	= %01111000
SS07	= %01111000
SS08	= %01110000

SS09	= %01100100
SS10	= %01100100
SS11	= %01111100
SS12	= %00100100
SS13	= %00100100
SS14	= %00000100
SS15	= %00000100
SS16	= %00000000

BLNK	= %00000000

;
; Define the constants for the Vertical Lines
;

V1	= %00000001
V2	= %00000010
V3	= %00000011
V4	= %00000100
V5	= %00000101
V6	= %00000110
V7	= %00000111
V8	= %00001000

.END
