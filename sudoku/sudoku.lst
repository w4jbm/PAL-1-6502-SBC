
; 64tass Turbo Assembler Macro V1.55.2200 listing file
; 64tass --intel-hex -o sudoku.hex -m --verbose-list -L sudoku.lst sudoku.a65
; Sun May 30 14:32:58 2021

;Offset	;Hex		;Source

;******  Processing input file: sudoku.a65

			; Sudoko Solver for the 6502
			;
			; Original Code by Adrian Conlon (MoleskiCoder on GitHub)
			;
			; Port to the PAL-1 by Jim McClanahan W4JBM, May 2021
			;
			; The brute force solution when the first element was added
			; but I'm fairly sure there is a more elegant way to handle
			; the situation described towards the end where this code
			; resides. --Jim W4JBM
			;
			; From: https://see.stanford.edu/materials/icspacs106b/H19-RecBacktrackExamples.pdf
			;
			; A straightforward port from C to 6502 assembler (although feeling like Forth!)
			;
			; $ 64tass --intel-hex sudoku.a65 -o sudoku.hex -m --verbose-list -L sudoku.lst
			; $ srec_cat sudoku.hex -intel -o sudoku.mos --MOS-technologies -CRLF
			; $ unix2dos pal_memt.mos

			; Clock cycles:
			;
			; 65sc02	41,668,796	20.8 seconds @ 2Mhz
			; 6502		46,013,289	23.0 seconds @ 2Mhz

			        .cpu "6502"


=$d			CR = $d
=$a			LF = $a

			; Some Page Zero space...

=$10			control = $10
=$10			stackp = control
=17			savea = stackp + 1
=18			savex = savea + 1
=19			savey = savex + 1
=20			returnl = savey +1
=21			returnh = returnl + 1
=20			return = returnl
=22			saveda = returnh + 1
=23			savedx = saveda + 1
=24			savedy = savedx + 1
=25			brtfc = savedy + 1

			; *** KIM ROM Routines ***
			;
			; A routine to send a byte to the console...
=$1ea0			xOutpt	= $1EA0	; Send one byte to the output port (OUTCH)
			;
			; ...and the reset vector to restart the system.
=$1c4f			xReset	= $1C4F	; Cold start of the system (START)


			*       = $2000

.2000			start:
.2000	4c b8 24		jmp reset

			; http://www.telegraph.co.uk/news/science/science-news/9359579/Worlds-hardest-sudoku-can-you-crack-it.html

.2003			puzzle:
			; Original Test Puzzle
			;	.byte 8, 0, 0, 0, 0, 0, 0, 0, 0
			;	.byte 0, 0, 3, 6, 0, 0, 0, 0, 0
			;	.byte 0, 7, 0, 0, 9, 0, 2, 0, 0
			;	.byte 0, 5, 0, 0, 0, 7, 0, 0, 0
			;	.byte 0, 0, 0, 0, 4, 5, 7, 0, 0
			;	.byte 0, 0, 0, 1, 0, 0, 0, 3, 0
			;	.byte 0, 0, 1, 0, 0, 0, 0, 6, 8
			;	.byte 0, 0, 8, 5, 0, 0, 0, 1, 0
			;	.byte 0, 9, 0, 0, 0, 0, 4, 0, 0

			; From dailysudoku.com/sudoku/ on May 29, 2021
			; Originally broke things for reasons described
			; in the brute force routine.
>2003	00 00 08 06		.byte 0, 0, 8, 6, 0, 0, 2, 0, 0
>2007	00 00 02 00 00
>200c	00 00 00 00		.byte 0, 0, 0, 0, 0, 0, 9, 0, 4
>2010	00 00 09 00 04
>2015	00 00 00 00		.byte 0, 0, 0, 0, 4, 0, 0, 8, 6
>2019	04 00 00 08 06

>201e	01 00 06 09		.byte 1, 0, 6, 9, 3, 0, 0, 4, 0
>2022	03 00 00 04 00
>2027	00 09 00 00		.byte 0, 9, 0, 0, 0, 0, 0, 5, 0
>202b	00 00 00 05 00
>2030	00 04 00 00		.byte 0, 4, 0, 0, 6, 5, 7, 0, 9
>2034	06 05 07 00 09

>2039	05 02 00 00		.byte 5, 2, 0, 0, 1, 0, 0, 0, 0
>203d	01 00 00 00 00
>2042	06 00 03 00		.byte 6, 0, 3, 0, 0, 0, 0, 0, 0
>2046	00 00 00 00 00
>204b	00 00 01 00		.byte 0, 0, 1, 0, 0, 6, 4, 0, 0
>204f	00 06 04 00 00

			; A Test Puzzle that is the same as the one
			; above, but with the first cell solved.
			;	.byte 4, 0, 8, 6, 0, 0, 2, 0, 0
			;	.byte 0, 0, 0, 0, 0, 0, 9, 0, 4
			;	.byte 0, 0, 0, 0, 4, 0, 0, 8, 6
			;
			;	.byte 1, 0, 6, 9, 3, 0, 0, 4, 0
			;	.byte 0, 9, 0, 0, 0, 0, 0, 5, 0
			;	.byte 0, 4, 0, 0, 6, 5, 7, 0, 9
			;
			;	.byte 5, 2, 0, 0, 1, 0, 0, 0, 0
			;	.byte 6, 0, 3, 0, 0, 0, 0, 0, 0
			;	.byte 0, 0, 1, 0, 0, 6, 4, 0, 0

			; A Test Puzzle that is the same as the one
			; above, but with the 3s and 4s swapped. This
			; showed that if the codes "first intelligent
			; guess" was right (in this case, 3), then
			; the puzzle would be solved.
			;	.byte 0, 0, 8, 6, 0, 0, 2, 0, 0
			;	.byte 0, 0, 0, 0, 0, 0, 9, 0, 3
			;	.byte 0, 0, 0, 0, 3, 0, 0, 8, 6
			;
			;	.byte 1, 0, 6, 9, 4, 0, 0, 3, 0
			;	.byte 0, 9, 0, 0, 0, 0, 0, 5, 0
			;	.byte 0, 3, 0, 0, 6, 5, 7, 0, 9
			;
			;	.byte 5, 2, 0, 0, 1, 0, 0, 0, 0
			;	.byte 6, 0, 4, 0, 0, 0, 0, 0, 0
			;	.byte 0, 0, 1, 0, 0, 6, 3, 0, 0


			; Scratchpad area.  Not sure how long this will be.  Aliased within "proc" scope.

>2054			scratch .fill $80

			; Some useful constants

=0			UNASSIGNED = 0
=9			BOARD_SIZE = 9
=81			CELL_COUNT = (BOARD_SIZE * BOARD_SIZE)


			.include "stack.a65"

;******  Processing file: stack.a65

			; Macros related to stack manipulation for
			; sudoku.a65
			;

			phx     .macro phx
			.endm


			plx     .macro plx
			.endm


			phy     .macro
			.endm


			ply     .macro
			.endm


			pusha   .macro pusha
			.endm


			popa    .macro popa
			.endm


			pushx   .macro
			.endm


			popx    .macro
			.endm


			pushy   .macro
			.endm


			popy    .macro
			.endm

			; Finish of the handy macros!





			; Initialise the stack to an empty state
.20d4			init    .proc

.20d4	48			pha

.20d5	a9 ff			lda #$ff
.20d7	85 10			sta stackp

.20d9	68			pla
.20da	60			rts
			.pend


;******  Return to file: sudoku.a65

			.include "io.a65"

;******  Processing file: io.a65

			; I/O routines for the PAL-1/KIM-1

			; *** KIM ROM Routines ***
			;
			; A routine to send a byte to the console...

			; xOutpt	= $1EA0	; Send one byte to the output port (OUTCH)

.20db	85 11		outchr  sta savea
.20dd	8a		        txa
.20de	85 12		        sta savex
.20e0	98		        tya
.20e1	85 13		        sta savey
.20e3	a5 11		        lda savea
.20e5	20 a0 1e	        jsr xOutpt
.20e8	a5 13		        lda savey
.20ea	a8		        tay
.20eb	a5 12		        lda savex
.20ed	aa		        tax
.20ee	a5 11		        lda savea
.20f0	60			rts


			; outstr
			;	example:
			;		jsr library::io::outstr
			; 		asciiz "Hello world,"
.20f1			outstr  .proc

.20f1	85 16			sta saveda

.20f3	68			pla
.20f4	85 14			sta returnl	; address low
.20f6	68			pla
.20f7	85 15			sta returnh	; address high

.20f9	84 18			sty savedy

				; Print each character in turn (first character is offset by one)
.20fb	a0 00			ldy #0
.20fd	c8		loop:	iny
.20fe	b1 14			lda (return),y
.2100	f0 05			beq finished
.2102	20 db 20		jsr outchr
.2105	d0 f6			bne loop
.2107			finished:
				; Sort out the return address so
.2107	18			clc
.2108	98			tya
.2109	65 14			adc returnl
.210b	85 14			sta returnl
.210d	a9 00			lda #0
.210f	65 15			adc returnh
.2111	48			pha
.2112	a5 14			lda returnl
.2114	48			pha

.2115	a4 18			ldy savedy
.2117	a5 16			lda saveda

.2119	60			rts
			.pend	; outstr



;******  Return to file: sudoku.a65



.211a			print_board_element .proc
.211a	a9 20			lda #' '
.211c	20 db 20		jsr outchr
.211f	86 12			stx savex
.2121	a6 10			ldx stackp
.2123	e8			inx
.2124	86 10			stx stackp
.2126	b5 00			lda 0,x
.2128	48			pha
.2129	a6 12			ldx savex
.212b	68			pla
.212c	aa			tax
.212d	bd 03 20		lda puzzle,x
.2130	f0 08			beq unassigned
.2132	69 30			adc #'0'
.2134	20 db 20		jsr outchr
.2137	4c 3f 21		jmp finish
.213a			unassigned:
.213a	a9 2d			lda #'-'
.213c	20 db 20		jsr outchr
.213f			finish:
.213f	a9 20			lda #' '
.2141	20 db 20		jsr outchr
.2144	60			rts
			.pend

.2145			print_box_break_vertical .proc
.2145	a9 7c			lda #'|'
.2147	20 db 20		jsr outchr
.214a	60			rts
			.pend

.214b			print_box_break_horizontal .proc
.214b	20 f1 20		jsr outstr
>214e	20 2d 2d 2d		.null " --------+---------+--------"
>2152	2d 2d 2d 2d 2d 2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2b
>2162	2d 2d 2d 2d 2d 2d 2d 2d 00
.216b	60			rts
			.pend

.216c			print_newline .proc

.216c	a9 0d			lda #CR
.216e	20 db 20		jsr outchr
.2171	a9 0a			lda #LF
.2173	20 db 20		jsr outchr

.2176	60			rts
			.pend

.2177			print_board .proc

.2177	20 6c 21		jsr print_newline
.217a	20 6c 21		jsr print_newline

.217d	20 4b 21		jsr print_box_break_horizontal
.2180	20 6c 21		jsr print_newline

.2183	a0 00			ldy #0
.2185			loop:
.2185	98			tya
.2186	86 12			stx savex
.2188	a6 10			ldx stackp
.218a	95 00			sta 0,x
.218c	ca			dex
.218d	86 10			stx stackp
.218f	a6 12			ldx savex
.2191	20 1a 21		jsr print_board_element

.2194	c8			iny

				; horizontal box break
.2195	b9 b3 22		lda table_move2box_y,y
.2198	d0 0b			bne boxh_continue
.219a	b9 c0 21		lda table_move2x,y
.219d	d0 06			bne boxh_continue
.219f	20 6c 21		jsr print_newline
.21a2	20 4b 21		jsr print_box_break_horizontal

.21a5			boxh_continue:
				; newline only
.21a5	b9 c0 21		lda table_move2x,y
.21a8	d0 06			bne newl_continue
.21aa	20 6c 21		jsr print_newline
.21ad	4c bb 21		jmp continue

.21b0			newl_continue:
				; vertical box break
.21b0	b9 62 22		lda table_move2box_x,y
.21b3	d0 06			bne boxv_continue
.21b5	20 45 21		jsr print_box_break_vertical
.21b8	4c bb 21		jmp continue

.21bb			boxv_continue:

.21bb			continue:
.21bb	c0 51			cpy #CELL_COUNT
.21bd	d0 c6			bne loop
.21bf	60			rts

			.pend

			;
			; ** Move and grid position translation methods
			;

.21c0			table_move2x:
>21c0	00 01 02 03		.byte 0, 1, 2, 3, 4, 5, 6, 7, 8
>21c4	04 05 06 07 08
>21c9	00 01 02 03		.byte 0, 1, 2, 3, 4, 5, 6, 7, 8
>21cd	04 05 06 07 08
>21d2	00 01 02 03		.byte 0, 1, 2, 3, 4, 5, 6, 7, 8
>21d6	04 05 06 07 08
>21db	00 01 02 03		.byte 0, 1, 2, 3, 4, 5, 6, 7, 8
>21df	04 05 06 07 08
>21e4	00 01 02 03		.byte 0, 1, 2, 3, 4, 5, 6, 7, 8
>21e8	04 05 06 07 08
>21ed	00 01 02 03		.byte 0, 1, 2, 3, 4, 5, 6, 7, 8
>21f1	04 05 06 07 08
>21f6	00 01 02 03		.byte 0, 1, 2, 3, 4, 5, 6, 7, 8
>21fa	04 05 06 07 08
>21ff	00 01 02 03		.byte 0, 1, 2, 3, 4, 5, 6, 7, 8
>2203	04 05 06 07 08
>2208	00 01 02 03		.byte 0, 1, 2, 3, 4, 5, 6, 7, 8
>220c	04 05 06 07 08

.2211			table_move2y:
>2211	00 00 00 00		.byte 0, 0, 0, 0, 0, 0, 0, 0, 0
>2215	00 00 00 00 00
>221a	01 01 01 01		.byte 1, 1, 1, 1, 1, 1, 1, 1, 1
>221e	01 01 01 01 01
>2223	02 02 02 02		.byte 2, 2, 2, 2, 2, 2, 2, 2, 2
>2227	02 02 02 02 02
>222c	03 03 03 03		.byte 3, 3, 3, 3, 3, 3, 3, 3, 3
>2230	03 03 03 03 03
>2235	04 04 04 04		.byte 4, 4, 4, 4, 4, 4, 4, 4, 4
>2239	04 04 04 04 04
>223e	05 05 05 05		.byte 5, 5, 5, 5, 5, 5, 5, 5, 5
>2242	05 05 05 05 05
>2247	06 06 06 06		.byte 6, 6, 6, 6, 6, 6, 6, 6, 6
>224b	06 06 06 06 06
>2250	07 07 07 07		.byte 7, 7, 7, 7, 7, 7, 7, 7, 7
>2254	07 07 07 07 07
>2259	08 08 08 08		.byte 8, 8, 8, 8, 8, 8, 8, 8, 8
>225d	08 08 08 08 08

.2262			table_move2box_x:
>2262	00 01 02 00		.byte 0, 1, 2, 0, 1, 2, 0, 1, 2
>2266	01 02 00 01 02
>226b	00 01 02 00		.byte 0, 1, 2, 0, 1, 2, 0, 1, 2
>226f	01 02 00 01 02
>2274	00 01 02 00		.byte 0, 1, 2, 0, 1, 2, 0, 1, 2
>2278	01 02 00 01 02
>227d	00 01 02 00		.byte 0, 1, 2, 0, 1, 2, 0, 1, 2
>2281	01 02 00 01 02
>2286	00 01 02 00		.byte 0, 1, 2, 0, 1, 2, 0, 1, 2
>228a	01 02 00 01 02
>228f	00 01 02 00		.byte 0, 1, 2, 0, 1, 2, 0, 1, 2
>2293	01 02 00 01 02
>2298	00 01 02 00		.byte 0, 1, 2, 0, 1, 2, 0, 1, 2
>229c	01 02 00 01 02
>22a1	00 01 02 00		.byte 0, 1, 2, 0, 1, 2, 0, 1, 2
>22a5	01 02 00 01 02
>22aa	00 01 02 00		.byte 0, 1, 2, 0, 1, 2, 0, 1, 2
>22ae	01 02 00 01 02

.22b3			table_move2box_y:
>22b3	00 00 00 00		.byte 0, 0, 0, 0, 0, 0, 0, 0, 0
>22b7	00 00 00 00 00
>22bc	01 01 01 01		.byte 1, 1, 1, 1, 1, 1, 1, 1, 1
>22c0	01 01 01 01 01
>22c5	02 02 02 02		.byte 2, 2, 2, 2, 2, 2, 2, 2, 2
>22c9	02 02 02 02 02
>22ce	00 00 00 00		.byte 0, 0, 0, 0, 0, 0, 0, 0, 0
>22d2	00 00 00 00 00
>22d7	01 01 01 01		.byte 1, 1, 1, 1, 1, 1, 1, 1, 1
>22db	01 01 01 01 01
>22e0	02 02 02 02		.byte 2, 2, 2, 2, 2, 2, 2, 2, 2
>22e4	02 02 02 02 02
>22e9	00 00 00 00		.byte 0, 0, 0, 0, 0, 0, 0, 0, 0
>22ed	00 00 00 00 00
>22f2	01 01 01 01		.byte 1, 1, 1, 1, 1, 1, 1, 1, 1
>22f6	01 01 01 01 01
>22fb	02 02 02 02		.byte 2, 2, 2, 2, 2, 2, 2, 2, 2
>22ff	02 02 02 02 02

			; ** Row, column and box start positions

.2304			table_move2row_start:
>2304	00 00 00 00		.byte 0, 0, 0, 0, 0, 0, 0, 0, 0
>2308	00 00 00 00 00
>230d	09 09 09 09		.byte 9, 9, 9, 9, 9, 9, 9, 9, 9
>2311	09 09 09 09 09
>2316	12 12 12 12		.byte 18, 18, 18, 18, 18, 18, 18, 18, 18
>231a	12 12 12 12 12
>231f	1b 1b 1b 1b		.byte 27, 27, 27, 27, 27, 27, 27, 27, 27
>2323	1b 1b 1b 1b 1b
>2328	24 24 24 24		.byte 36, 36, 36, 36, 36, 36, 36, 36, 36
>232c	24 24 24 24 24
>2331	2d 2d 2d 2d		.byte 45, 45, 45, 45, 45, 45, 45, 45, 45
>2335	2d 2d 2d 2d 2d
>233a	36 36 36 36		.byte 54, 54, 54, 54, 54, 54, 54, 54, 54
>233e	36 36 36 36 36
>2343	3f 3f 3f 3f		.byte 63, 63, 63, 63, 63, 63, 63, 63, 63
>2347	3f 3f 3f 3f 3f
>234c	48 48 48 48		.byte 72, 72, 72, 72, 72, 72, 72, 72, 72
>2350	48 48 48 48 48

.2355			table_move2box_start:
>2355	00 00 00 03		.byte 0,  0,  0,  3,  3,  3,  6,  6,  6
>2359	03 03 06 06 06
>235e	00 00 00 03		.byte 0,  0,  0,  3,  3,  3,  6,  6,  6
>2362	03 03 06 06 06
>2367	00 00 00 03		.byte 0,  0,  0,  3,  3,  3,  6,  6,  6
>236b	03 03 06 06 06
>2370	1b 1b 1b 1e		.byte 27, 27, 27, 30, 30, 30, 33, 33, 33
>2374	1e 1e 21 21 21
>2379	1b 1b 1b 1e		.byte 27, 27, 27, 30, 30, 30, 33, 33, 33
>237d	1e 1e 21 21 21
>2382	1b 1b 1b 1e		.byte 27, 27, 27, 30, 30, 30, 33, 33, 33
>2386	1e 1e 21 21 21
>238b	36 36 36 39		.byte 54, 54, 54, 57, 57, 57, 60, 60, 60
>238f	39 39 3c 3c 3c
>2394	36 36 36 39		.byte 54, 54, 54, 57, 57, 57, 60, 60, 60
>2398	39 39 3c 3c 3c
>239d	36 36 36 39		.byte 54, 54, 54, 57, 57, 57, 60, 60, 60
>23a1	39 39 3c 3c 3c

			; Function: is_used_in_row
			; ------------------------
			; Returns a boolean which indicates whether any assigned entry
			; in the specified row matches the given number.

			is_used_in_row .macro ; ( a:number x:n -- zero:used non-zero:unused )
			.endm


			; Function: is_used_in_column
			; ---------------------------
			; Returns a boolean which indicates whether any assigned entry
			; in the specified column matches the given number.

			is_used_in_column .macro ; ( a:number x:n -- zero:used non-zero:unused )
			.endm


			; Function: is_used_in_box
			; ------------------------
			; Returns a boolean which indicates whether any assigned entry
			; within the specified 3x3 box matches the given number.

			is_used_in_box .macro ; ( a:number x:n -- zero:used non-zero:unused )
			.endm


			; Function: is_available
			; ----------------------
			; Returns a boolean which indicates whether it will be legal to assign
			; number to the given row, column location.As assignment is legal if it that
			; number is not already used in the row, column, or box.

			is_available .macro ; ( a:number x:n -- zero:available non-zero:unavailable )
			.endm


			; Function: solve
			; ---------------
			; Takes a partially filled - in grid and attempts to assign values to all
			; unassigned locations in such a way to meet the requirements for sudoku
			; solution(non - duplication across rows, columns, and boxes).The function
			; operates via recursive backtracking : it finds an unassigned location with
			; the grid and then considers all digits from 1 to "board-size" in a loop.If a digit
			; is found that has no existing conflicts, tentatively assign it and recur
			; to attempt to fill in rest of grid.If this was successful, the puzzle is
			; solved.If not, unmake that decision and try again.If all digits have
			; been examined and none worked out, return false to backtrack to previous
			; decision point.

.23a6			solve .proc ; ( n -- A:f )

.23a6	8a		        txa
.23a7	48		        pha

.23a8	86 12			stx savex
.23aa	a6 10			ldx stackp
.23ac	e8			inx
.23ad	86 10			stx stackp
.23af	b5 00			lda 0,x
.23b1	48			pha
.23b2	a6 12			ldx savex
.23b4	68			pla
.23b5	aa			tax
.23b6	e0 51			cpx #CELL_COUNT
.23b8	d0 05			bne _not_finished

.23ba	68		        pla
.23bb	aa		        tax
.23bc	a9 00			lda #0
.23be	60			rts			; success!

.23bf			_not_finished:
.23bf	bd 03 20		lda puzzle,x
.23c2	f0 12			beq _begin_loop

.23c4	e8			inx
.23c5	8a			txa
.23c6	86 12			stx savex
.23c8	a6 10			ldx stackp
.23ca	95 00			sta 0,x
.23cc	ca			dex
.23cd	86 10			stx stackp
.23cf	a6 12			ldx savex
.23d1	68		        pla
.23d2	aa		        tax

.23d3	4c a6 23		jmp solve		; if it's already assigned, skip

.23d6			_begin_loop:
.23d6	a0 01			ldy #1

.23d8			_loop:
.23d8	98			tya


.23d9	bc 04 23		ldy table_move2row_start,x

.23dc	d9 03 20		cmp puzzle,y
.23df	f0 26			beq row_used
.23e1	d9 04 20		cmp puzzle+1,y
.23e4	f0 21			beq row_used
.23e6	d9 05 20		cmp puzzle+2,y
.23e9	f0 1c			beq row_used
.23eb	d9 06 20		cmp puzzle+3,y
.23ee	f0 17			beq row_used
.23f0	d9 07 20		cmp puzzle+4,y
.23f3	f0 12			beq row_used
.23f5	d9 08 20		cmp puzzle+5,y
.23f8	f0 0d			beq row_used
.23fa	d9 09 20		cmp puzzle+6,y
.23fd	f0 08			beq row_used
.23ff	d9 0a 20		cmp puzzle+7,y
.2402	f0 03			beq row_used
.2404	d9 0b 20		cmp puzzle+8,y

.2407			row_used:
.2407	f0 65			beq used


.2409	bc c0 21		ldy table_move2x,x

.240c	d9 03 20		cmp puzzle,y
.240f	f0 26			beq column_used
.2411	d9 0c 20		cmp puzzle+(BOARD_SIZE*1),y
.2414	f0 21			beq column_used
.2416	d9 15 20		cmp puzzle+(BOARD_SIZE*2),y
.2419	f0 1c			beq column_used
.241b	d9 1e 20		cmp puzzle+(BOARD_SIZE*3),y
.241e	f0 17			beq column_used
.2420	d9 27 20		cmp puzzle+(BOARD_SIZE*4),y
.2423	f0 12			beq column_used
.2425	d9 30 20		cmp puzzle+(BOARD_SIZE*5),y
.2428	f0 0d			beq column_used
.242a	d9 39 20		cmp puzzle+(BOARD_SIZE*6),y
.242d	f0 08			beq column_used
.242f	d9 42 20		cmp puzzle+(BOARD_SIZE*7),y
.2432	f0 03			beq column_used
.2434	d9 4b 20		cmp puzzle+(BOARD_SIZE*8),y

.2437			column_used:
.2437	f0 35			beq used


.2439	bc 55 23		ldy table_move2box_start,x

.243c	d9 03 20		cmp puzzle,y
.243f	f0 26			beq box_used
.2441	d9 04 20		cmp puzzle+1,y
.2444	f0 21			beq box_used
.2446	d9 05 20		cmp puzzle+2,y
.2449	f0 1c			beq box_used
.244b	d9 0c 20		cmp puzzle+BOARD_SIZE,y
.244e	f0 17			beq box_used
.2450	d9 0d 20		cmp puzzle+BOARD_SIZE+1,y
.2453	f0 12			beq box_used
.2455	d9 0e 20		cmp puzzle+BOARD_SIZE+2,y
.2458	f0 0d			beq box_used
.245a	d9 15 20		cmp puzzle+(BOARD_SIZE*2),y
.245d	f0 08			beq box_used
.245f	d9 16 20		cmp puzzle+(BOARD_SIZE*2)+1,y
.2462	f0 03			beq box_used
.2464	d9 17 20		cmp puzzle+(BOARD_SIZE*2)+2,y

.2467			box_used:
.2467	f0 05			beq used

.2469	a8			tay
.246a	a9 00			lda #0
.246c	f0 01			beq done
.246e			used:
.246e	a8			tay
				; y *must* be non-zero, clearing the zero flag implicitly
.246f			done:
.246f	d0 32			bne _loop_continue	; if looks promising

.2471	98			tya
.2472	9d 03 20		sta puzzle,x		; make tentative assignment

.2475	86 12			stx savex
.2477	a6 10			ldx stackp
.2479	95 00			sta 0,x
.247b	ca			dex
.247c	86 10			stx stackp
.247e	a6 12			ldx savex

.2480	e8			inx
.2481	8a			txa
.2482	86 12			stx savex
.2484	a6 10			ldx stackp
.2486	95 00			sta 0,x
.2488	ca			dex
.2489	86 10			stx stackp
.248b	a6 12			ldx savex
.248d	ca			dex

.248e	20 a6 23		jsr solve

.2491	48			pha
.2492	86 12			stx savex
.2494	a6 10			ldx stackp
.2496	e8			inx
.2497	86 10			stx stackp
.2499	b5 00			lda 0,x
.249b	48			pha
.249c	a6 12			ldx savex
.249e	68			pla
.249f	a8			tay
.24a0	68			pla

.24a1	f0 10			beq _return_true	; recur, if success, yay!

.24a3			_loop_continue:
.24a3	c8			iny
.24a4	c0 0a			cpy #BOARD_SIZE + 1	; consider all digits
.24a6	f0 03			beq _round
.24a8	4c d8 23		jmp _loop
.24ab			_round:

							; failure, unmake & try again
.24ab	a9 00			lda #UNASSIGNED
.24ad	9d 03 20		sta puzzle,x

.24b0			_return_false:
.24b0	68		        pla
.24b1	aa		        tax
				; x *must* be non-zero
.24b2	60			rts			; this triggers backtracking

.24b3			_return_true:
.24b3	68		        pla
.24b4	aa		        tax
.24b5	a9 00			lda #0
.24b7	60			rts

			.pend

			;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.24b8			reset:
.24b8	d8			cld             ; Clear the decimal mode
.24b9	20 d4 20		jsr init

.24bc	20 f1 20		jsr outstr
>24bf	0d 0a 53 6f	 	.null CR,LF,"Solving puzzle: "
>24c3	6c 76 69 6e 67 20 70 75 7a 7a 6c 65 3a 20 00

.24d2	a9 00			lda #0
.24d4	cd 03 20		cmp puzzle
.24d7	f0 1e			beq brutef
.24d9	86 12			stx savex
.24db	a6 10			ldx stackp
.24dd	95 00			sta 0,x
.24df	ca			dex
.24e0	86 10			stx stackp
.24e2	a6 12			ldx savex
.24e4	20 a6 23		jsr solve
.24e7	d0 45			bne fail

.24e9			success:
.24e9	20 f1 20		jsr outstr
>24ec	70 61 73 73	 	.null "pass"
>24f0	00

.24f1	20 77 21		jsr print_board

.24f4	4c 36 25		jmp end

			; There is a bug in the original code that I haven't been able
			; to work through. If the first cell of the puzzle is populated,
			; the code works fine. Also, if the value of the first cell
			; matches the "intelligent guess" first made by the program
			; things work.
			;
			; But if the first cell is empty AND is not the value first
			; tried, it will return a puzzle that says it has been solved
			; but only has that first guess and the unknowns set back to
			; zero.
			;
			; For now, this is my solution. Above we checked for the first
			; cell being empty. Now let's count down from 9 until we find
			; the right value or run out of numbers.
			;
			; This routine brute forces through possible solutions where
			; the first number in the puzzle is not known.

.24f7			brutef:
.24f7	a9 09		        lda #BOARD_SIZE
.24f9	85 19		        sta brtfc                  ; store the brute force counter

.24fb			bfloop:
.24fb	a5 19		        lda brtfc
.24fd	8d 03 20	        sta puzzle
.2500	20 d4 20	        jsr init
.2503	a9 00		        lda #0
.2505	86 12			stx savex
.2507	a6 10			ldx stackp
.2509	95 00			sta 0,x
.250b	ca			dex
.250c	86 10			stx stackp
.250e	a6 12			ldx savex
.2510	20 a6 23	        jsr solve
.2513	a2 50		        ldx #CELL_COUNT-1
.2515	bd 03 20	bftst:  lda puzzle,X
.2518	c9 00		        cmp #0
.251a	f0 06		        beq bfdwn
.251c	ca		        dex
.251d	d0 f6		        bne bftst

			; if we get here, there was no zero found in the puzzle

.251f	4c e9 24	        jmp success

			; ...if that didn't work, try one less

.2522	a6 19		bfdwn: ldx brtfc
.2524	ca		        dex
.2525	e0 00		        cpx #0
.2527	f0 05		        beq fail
.2529	86 19		        stx brtfc
.252b	4c fb 24	        jmp bfloop

.252e			fail:
.252e	20 f1 20		jsr outstr
>2531	66 61 69 6c	 	.null "fail"
>2535	00

.2536			end:
.2536	20 f1 20		jsr outstr
>2539	0d 0a 00	 	.byte CR,LF, 0
.253c	4c 4f 1c		jmp xReset



;******  End of listing
